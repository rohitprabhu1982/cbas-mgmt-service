(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["admin-components-admin-module"],{

/***/ "./src/app/admin/components/account/account-dashboard.component.ts":
/*!*************************************************************************!*\
  !*** ./src/app/admin/components/account/account-dashboard.component.ts ***!
  \*************************************************************************/
/*! exports provided: EditAccountComponent, DeleteAccountComponent, AccountDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditAccountComponent", function() { return EditAccountComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteAccountComponent", function() { return DeleteAccountComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountDashboardPage", function() { return AccountDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xlsx */ "./node_modules/xlsx/xlsx.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _models_account_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/account.model */ "./src/app/admin/models/account.model.ts");
/* harmony import */ var _services_account_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/account.service */ "./src/app/admin/services/account.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var EditAccountComponent = /** @class */ (function () {
    function EditAccountComponent() {
    }
    EditAccountComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditAccountComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditAccount(this.params.data);
    };
    EditAccountComponent.prototype.refresh = function () {
        return false;
    };
    EditAccountComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Edit Account\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-account\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], EditAccountComponent);
    return EditAccountComponent;
}());

var DeleteAccountComponent = /** @class */ (function () {
    function DeleteAccountComponent() {
    }
    DeleteAccountComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteAccountComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectDeleteAccount(this.params.data);
    };
    DeleteAccountComponent.prototype.refresh = function () {
        return false;
    };
    DeleteAccountComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Delete Account\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], DeleteAccountComponent);
    return DeleteAccountComponent;
}());

// con
var AccountDashboardPage = /** @class */ (function () {
    function AccountDashboardPage(accountService, router) {
        this.accountService = accountService;
        this.paginationPageSize = 20;
        this.dropdownData = [];
        this.delAccountTitle = "Delete Account";
        this.delAccountMessage = "Are you sure you want to delete Account?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditAccountComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'Name',
                field: 'name',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "fw-semi-bold inactive" : "fw-semi-bold ";
                }
            },
            {
                headerName: 'Industry',
                field: 'industryName',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Sector',
                field: 'sectorName',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteAccountComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
        this.showCreateAccount = false;
        this.showEditAccount = false;
        this.showDeleteAccount = false;
        this.selAccountId = 1;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    AccountDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input, #search-countries");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        this.loadAllAccounts();
    };
    AccountDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    AccountDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadAccounts) {
            this.busyLoadAccounts.unsubscribe();
        }
        if (this.busyDeleteAccount) {
            this.busyDeleteAccount.unsubscribe();
        }
    };
    AccountDashboardPage.prototype.ngAfterViewInit = function () {
    };
    AccountDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    AccountDashboardPage.prototype.loadAllAccounts = function () {
        var _this = this;
        var that = this;
        this.busyLoadAccounts = this.accountService.getAll().subscribe(function (accountdata) {
            if (accountdata) {
                that.data = accountdata;
                that.gridApi.sizeColumnsToFit();
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    AccountDashboardPage.prototype.reloadAccounts = function (reload) {
        this.showCreateAccount = false;
        this.showEditAccount = false;
        if (reload) {
            this.loadAllAccounts();
        }
        else {
            this.selAccount = new _models_account_model__WEBPACK_IMPORTED_MODULE_4__["Account"]();
        }
    };
    AccountDashboardPage.prototype.deleteAccount = function (id) {
        var _this = this;
        this.busyDeleteAccount = this.accountService.deleteAccountById(id).subscribe(function (data) {
            if (data) {
                _this.reloadAccounts(true);
                _this.showDeleteAccount = false;
                jQuery('#confirm-popup').modal('hide');
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    AccountDashboardPage.prototype.s2ab = function (s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i !== s.length; ++i)
            view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    };
    AccountDashboardPage.prototype.exportAccountsReport = function (data, filename, sheetName) {
        var ws = xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].json_to_sheet(data);
        var wb = xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].book_new();
        xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].book_append_sheet(wb, ws, sheetName);
        /* save to file */
        var wbout = xlsx__WEBPACK_IMPORTED_MODULE_3__["write"](wb, { bookType: 'xlsx', type: 'binary' });
        Object(file_saver__WEBPACK_IMPORTED_MODULE_2__["saveAs"])(new Blob([this.s2ab(wbout)]), filename);
    };
    AccountDashboardPage.prototype.downloadLaborCategories = function () {
        this.exportAccountsReport(this.data, 'laborcat-report.xlsx', 'Clients');
    };
    AccountDashboardPage.prototype.addAccount = function () {
        this.showCreateAccount = true;
    };
    AccountDashboardPage.prototype.selectEditAccount = function (account) {
        this.showEditAccount = true;
        this.selAccount = account;
    };
    AccountDashboardPage.prototype.selectDeleteAccount = function (account) {
        this.showDeleteAccount = true;
        this.selAccount = account;
    };
    AccountDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    AccountDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "account-dashboard",
            template: __webpack_require__(/*! ./account-dashboard.template.html */ "./src/app/admin/components/account/account-dashboard.template.html"),
            providers: [_services_account_service__WEBPACK_IMPORTED_MODULE_5__["AccountService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./account-dashboard.styles.scss */ "./src/app/admin/components/account/account-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_account_service__WEBPACK_IMPORTED_MODULE_5__["AccountService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], AccountDashboardPage);
    return AccountDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/account/account-dashboard.styles.scss":
/*!************************************************************************!*\
  !*** ./src/app/admin/components/account/account-dashboard.styles.scss ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.accountdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n.ag-row .ag-cell {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/account/account-dashboard.template.html":
/*!**************************************************************************!*\
  !*** ./src/app/admin/components/account/account-dashboard.template.html ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">Accounts</h1>\r\n<div data-ng-controller=\"accountdashboardController\" class=\"accountdashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-10\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-account\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-account\" title=\"Add Account\"\r\n                                    (click)=\"addAccount()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Add Account\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid-wrapper\">\r\n                        <ag-grid-angular\r\n                            #agGrid\r\n                            style=\"width: 100%; height: 650px;\"\r\n                            class=\"ag-theme-balham\"\r\n                            [rowData]=\"data\"\r\n                            [columnDefs]=\"columnDefs\"\r\n                            [defaultColDef]=\"defaultColDef\"\r\n                            [gridOptions]=\"gridOptions\"\r\n                            [floatingFilter]=\"true\"\r\n                            [pagination]=\"true\"\r\n                            (gridReady)=\"onGridReady($event)\"\r\n                            [paginationAutoPageSize]=\"true\"\r\n                            >\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </div>\r\n                <div class=\"widget-footer\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-xs-12\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary\"\r\n                                    (click)=\"onClickBackButton()\">\r\n                                    <span class=\"glyphicon glyphicon-chevron-left txt-gap\"\r\n                                        aria-hidden=\"true\"></span>Back</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showCreateAccount\" create-account-popup [AccountId]=\"selAccountId\" (reloadAccounts)=\"reloadAccounts($event)\"></div>\r\n    <div *ngIf=\"showEditAccount\" edit-account-popup [model]=\"selAccount\" (reloadAccounts)=\"reloadAccounts($event)\"></div>\r\n    <div *ngIf=\"showDeleteAccount\" confirm-popup-ph [model]=\"selAccount\" (callBack)=\"deleteAccount(selAccount.accountId)\"\r\n    (hideModal)=\"showDeleteAccount = false\" [msg]=\"'Are you sure you want to delete Account '+ selAccount.name+' ?'\"\r\n    [title]=\"'Delete Account'\" >\r\n</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/account/create-account-popup.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/admin/components/account/create-account-popup.component.ts ***!
  \****************************************************************************/
/*! exports provided: CreateAccountPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateAccountPopup", function() { return CreateAccountPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_account_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/account.model */ "./src/app/admin/models/account.model.ts");
/* harmony import */ var _services_account_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/account.service */ "./src/app/admin/services/account.service.ts");
/* harmony import */ var _services_client_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/client.service */ "./src/app/admin/services/client.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Component for creating a labor category
*/





var CreateAccountPopup = /** @class */ (function () {
    function CreateAccountPopup(router, accountService, clientService) {
        this.accountService = accountService;
        this.clientService = clientService;
        this.reloadAccounts = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.account = new _models_account_model__WEBPACK_IMPORTED_MODULE_2__["Account"]();
        this.accountenabled = true;
        this.lstIndustries = [];
        this.lstSectors = [];
        this.router = router;
        this.alerts = [
            {
                type: 'warning',
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    CreateAccountPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
        this.loadIndustries();
    };
    CreateAccountPopup.prototype.ngOnDestroy = function () {
        if (this.busySaveAccount) {
            this.busySaveAccount.unsubscribe();
        }
        if (this.busyLoadIndustries) {
            this.busyLoadIndustries.unsubscribe();
        }
        if (this.busyLoadIndustrySectors) {
            this.busyLoadIndustrySectors.unsubscribe();
        }
    };
    CreateAccountPopup.prototype.loadIndustries = function () {
        var _this = this;
        this.busyLoadIndustries = this.accountService.loadIndustries().subscribe(function (data) {
            if (data) {
                _this.lstIndustries = data;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    CreateAccountPopup.prototype.loadSectorsForIndustry = function (selIndustryId) {
        var _this = this;
        var that = this;
        this.busyLoadIndustrySectors = this.accountService.loadSectorsForIndustry(selIndustryId).subscribe(function (data) {
            if (data) {
                that.lstSectors = data;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    CreateAccountPopup.prototype.createAccount = function (newAccount) {
        var _this = this;
        jQuery('#addaccountform').parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery('#addaccountform').parsley().isValid()) {
            newAccount.enabled = (this.accountenabled) ? 'Y' : 'N';
            this.busySaveAccount = this.accountService.saveAccount(newAccount).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                    _this.reloadAccounts.emit(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    CreateAccountPopup.prototype.OnIndustryChanged = function (event) {
        this.loadSectorsForIndustry(this.account.industryId);
    };
    CreateAccountPopup.prototype.reset = function (flag) {
        jQuery('#create-account').on('hidden').find('#name').val('');
        jQuery('#addaccountform').parsley().reset();
        jQuery('#create-account').modal('hide');
        this.showErrorFlag = false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateAccountPopup.prototype, "reloadAccounts", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], CreateAccountPopup.prototype, "AccountId", void 0);
    CreateAccountPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: '[create-account-popup]',
            template: __webpack_require__(/*! ./create-account-popup.template.html */ "./src/app/admin/components/account/create-account-popup.template.html"),
            providers: [_services_account_service__WEBPACK_IMPORTED_MODULE_3__["AccountService"], _services_client_service__WEBPACK_IMPORTED_MODULE_4__["ClientService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./create-account-popup.styles.scss */ "./src/app/admin/components/account/create-account-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateAccountPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_account_service__WEBPACK_IMPORTED_MODULE_3__["AccountService"],
            _services_client_service__WEBPACK_IMPORTED_MODULE_4__["ClientService"]])
    ], CreateAccountPopup);
    return CreateAccountPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/account/create-account-popup.styles.scss":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/account/create-account-popup.styles.scss ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/account/create-account-popup.template.html":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/account/create-account-popup.template.html ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-account\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-account-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-account-title\">Add Account</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"addaccountform\" #addaccountform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"name\" class=\"col-md-2 form-control-label text-md-right\">Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"account.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Name is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Industry -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"client-industry\" class=\"col-md-2 form-control-label text-md-right\">Industry\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"account.industryId\" title=\"Industry\" name=\"industry\" class=\"form-control fdatable\" id=\"client-industry\"\r\n\t\t\t\t\t\t\tplaceholder=\"Select Industry\" (change)=\"OnIndustryChanged($event)\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Industry is required\">\r\n\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t<option *ngFor=\"let ind of lstIndustries\" [ngValue]=\"ind.industryId\">{{ind.name}}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Sector -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<label for=\"client-sector\" class=\"col-md-4 form-control-label text-md-right\">\r\n\t\t\t\t\t\t\tSector\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"account.sectorId\" title=\"Sector\" name=\"sector-name\" class=\"form-control fdatable\" id=\"client-sector\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Select Sector\"\r\n\t\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Sector is required\">\r\n\t\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let sec of lstSectors\" [ngValue]=\"sec.sectorId\">{{sec.sectorName}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"accountenabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createAccount(account)\">Save Account</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/account/edit-account-popup.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/admin/components/account/edit-account-popup.component.ts ***!
  \**************************************************************************/
/*! exports provided: EditAccountPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditAccountPopup", function() { return EditAccountPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_account_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/account.service */ "./src/app/admin/services/account.service.ts");
/* harmony import */ var _services_client_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/client.service */ "./src/app/admin/services/client.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Componentfor adding contact as a popup.
*/




var EditAccountPopup = /** @class */ (function () {
    function EditAccountPopup(router, accountService, clientService) {
        this.accountService = accountService;
        this.clientService = clientService;
        this.reloadAccounts = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.accountenabled = true;
        this.lstIndustries = [];
        this.lstSectors = [];
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    EditAccountPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
        this.loadIndustries();
    };
    EditAccountPopup.prototype.ngOnDestroy = function () {
        if (this.busySaveAccount) {
            this.busySaveAccount.unsubscribe();
        }
        if (this.busyLoadIndustries) {
            this.busyLoadIndustries.unsubscribe();
        }
        if (this.busyLoadIndustrySectors) {
            this.busyLoadIndustrySectors.unsubscribe();
        }
    };
    EditAccountPopup.prototype.loadIndustries = function () {
        var _this = this;
        this.busyLoadIndustries = this.accountService.loadIndustries().subscribe(function (data) {
            if (data) {
                _this.lstIndustries = data;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    EditAccountPopup.prototype.loadSectorsForIndustry = function (selIndustryId) {
        var _this = this;
        var that = this;
        this.busyLoadIndustrySectors = this.accountService.loadSectorsForIndustry(selIndustryId).subscribe(function (data) {
            if (data) {
                that.lstSectors = data;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    EditAccountPopup.prototype.OnIndustryChanged = function (event) {
        this.loadSectorsForIndustry(this.editAccount.industryId);
    };
    EditAccountPopup.prototype.updateAccount = function (account) {
        var _this = this;
        jQuery("#editaccountform").parsley().validate();
        account.enabled = (this.accountenabled) ? 'Y' : 'N';
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#editaccountform").parsley().isValid()) {
            this.busySaveAccount = this.accountService.saveAccount(account).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    EditAccountPopup.prototype.reset = function (flag) {
        jQuery("#edit-account").on("hidden").find("#name").val("");
        jQuery("#editaccountform").parsley().reset();
        jQuery("#edit-account").modal("hide");
        this.reloadAccounts.emit(flag);
        this.showErrorFlag = false;
    };
    EditAccountPopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editAccount = Object.assign({}, chg.currentValue);
                    this.loadSectorsForIndustry(this.editAccount.industryId);
                    this.accountenabled = (this.editAccount.enabled === 'Y') ? true : false;
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], EditAccountPopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditAccountPopup.prototype, "reloadAccounts", void 0);
    EditAccountPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-account-popup]",
            template: __webpack_require__(/*! ./edit-account-popup.template.html */ "./src/app/admin/components/account/edit-account-popup.template.html"),
            providers: [_services_account_service__WEBPACK_IMPORTED_MODULE_2__["AccountService"], _services_client_service__WEBPACK_IMPORTED_MODULE_3__["ClientService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./edit-account-popup.styles.scss */ "./src/app/admin/components/account/edit-account-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditAccountPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_account_service__WEBPACK_IMPORTED_MODULE_2__["AccountService"],
            _services_client_service__WEBPACK_IMPORTED_MODULE_3__["ClientService"]])
    ], EditAccountPopup);
    return EditAccountPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/account/edit-account-popup.styles.scss":
/*!*************************************************************************!*\
  !*** ./src/app/admin/components/account/edit-account-popup.styles.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/account/edit-account-popup.template.html":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/account/edit-account-popup.template.html ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-account\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-account-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-account-title\">Edit Account</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"editaccountform\" #editaccountform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"name\" class=\"col-md-2 form-control-label text-md-right\">Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"editAccount.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Name is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Industry -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"client-industry\" class=\"col-md-2 form-control-label text-md-right\">Industry\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"editAccount.industryId\" title=\"Industry\" name=\"industry\" class=\"form-control fdatable\" id=\"client-industry\"\r\n\t\t\t\t\t\t\tplaceholder=\"Select Industry\" (change)=\"OnIndustryChanged($event)\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Industry is required\">\r\n\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t<option *ngFor=\"let ind of lstIndustries\" [ngValue]=\"ind.industryId\">{{ind.name}}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Sector -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<label for=\"client-sector\" class=\"col-md-4 form-control-label text-md-right\">\r\n\t\t\t\t\t\t\tSector\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"editAccount.sectorId\" title=\"Sector\" name=\"sector-name\" class=\"form-control fdatable\" id=\"client-sector\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Select Sector\"\r\n\t\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Sector is required\">\r\n\t\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let sec of lstSectors\" [ngValue]=\"sec.sectorId\">{{sec.sectorName}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"accountenabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateAccount(editAccount)\">Save Account</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/admin.module.ts":
/*!**************************************************!*\
  !*** ./src/app/admin/components/admin.module.ts ***!
  \**************************************************/
/*! exports provided: routes, AdminModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "routes", function() { return routes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdminModule", function() { return AdminModule; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _authentication_util_authorization_helper_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../authentication/util/authorization.helper.util */ "./src/app/authentication/util/authorization.helper.util.ts");
/* harmony import */ var _login_services_auth_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../login/services/auth.service */ "./src/app/login/services/auth.service.ts");
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/shared.module */ "./src/app/shared/shared.module.ts");
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../services/admin.service */ "./src/app/admin/services/admin.service.ts");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
/* harmony import */ var _services_lookup_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/lookup.service */ "./src/app/admin/services/lookup.service.ts");
/* harmony import */ var _services_role_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../services/role.service */ "./src/app/admin/services/role.service.ts");
/* harmony import */ var _util_client_filter_pipe__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../util/client-filter.pipe */ "./src/app/admin/util/client-filter.pipe.ts");
/* harmony import */ var _util_laborcat_filter_pipe__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../util/laborcat-filter.pipe */ "./src/app/admin/util/laborcat-filter.pipe.ts");
/* harmony import */ var _util_lookup_filter_pipe__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../util/lookup-filter.pipe */ "./src/app/admin/util/lookup-filter.pipe.ts");
/* harmony import */ var _util_resource_filter_pipe__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../util/resource-filter.pipe */ "./src/app/admin/util/resource-filter.pipe.ts");
/* harmony import */ var _util_user_filter_pipe__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../util/user-filter.pipe */ "./src/app/admin/util/user-filter.pipe.ts");
/* harmony import */ var _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./account/account-dashboard.component */ "./src/app/admin/components/account/account-dashboard.component.ts");
/* harmony import */ var _account_create_account_popup_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./account/create-account-popup.component */ "./src/app/admin/components/account/create-account-popup.component.ts");
/* harmony import */ var _account_edit_account_popup_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./account/edit-account-popup.component */ "./src/app/admin/components/account/edit-account-popup.component.ts");
/* harmony import */ var _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./client/client-dashboard.component */ "./src/app/admin/components/client/client-dashboard.component.ts");
/* harmony import */ var _client_create_client_popup_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./client/create-client-popup.component */ "./src/app/admin/components/client/create-client-popup.component.ts");
/* harmony import */ var _client_edit_client_popup_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./client/edit-client-popup.component */ "./src/app/admin/components/client/edit-client-popup.component.ts");
/* harmony import */ var _importpipe_importpipe_dashboard_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./importpipe/importpipe-dashboard.component */ "./src/app/admin/components/importpipe/importpipe-dashboard.component.ts");
/* harmony import */ var _laborcat_create_laborcat_popup_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./laborcat/create-laborcat-popup.component */ "./src/app/admin/components/laborcat/create-laborcat-popup.component.ts");
/* harmony import */ var _laborcat_edit_laborcat_popup_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./laborcat/edit-laborcat-popup.component */ "./src/app/admin/components/laborcat/edit-laborcat-popup.component.ts");
/* harmony import */ var _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./laborcat/laborcat-dashboard.component */ "./src/app/admin/components/laborcat/laborcat-dashboard.component.ts");
/* harmony import */ var _lcatgroup_create_lcatgroup_popup_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./lcatgroup/create-lcatgroup-popup.component */ "./src/app/admin/components/lcatgroup/create-lcatgroup-popup.component.ts");
/* harmony import */ var _lcatgroup_edit_lcatgroup_popup_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./lcatgroup/edit-lcatgroup-popup.component */ "./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.component.ts");
/* harmony import */ var _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./lcatgroup/lcatgroup-dashboard.component */ "./src/app/admin/components/lcatgroup/lcatgroup-dashboard.component.ts");
/* harmony import */ var _lookup_create_lookup_popup_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./lookup/create-lookup-popup.component */ "./src/app/admin/components/lookup/create-lookup-popup.component.ts");
/* harmony import */ var _lookup_edit_lookup_popup_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./lookup/edit-lookup-popup.component */ "./src/app/admin/components/lookup/edit-lookup-popup.component.ts");
/* harmony import */ var _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./lookup/lookup-dashboard.component */ "./src/app/admin/components/lookup/lookup-dashboard.component.ts");
/* harmony import */ var _resources_create_resource_popup_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./resources/create-resource-popup.component */ "./src/app/admin/components/resources/create-resource-popup.component.ts");
/* harmony import */ var _resources_edit_resource_popup_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./resources/edit-resource-popup.component */ "./src/app/admin/components/resources/edit-resource-popup.component.ts");
/* harmony import */ var _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./resources/resource-dashboard.component */ "./src/app/admin/components/resources/resource-dashboard.component.ts");
/* harmony import */ var _users_create_user_popup_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./users/create-user-popup.component */ "./src/app/admin/components/users/create-user-popup.component.ts");
/* harmony import */ var _users_edit_user_popup_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./users/edit-user-popup.component */ "./src/app/admin/components/users/edit-user-popup.component.ts");
/* harmony import */ var _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./users/user-dashboard.component */ "./src/app/admin/components/users/user-dashboard.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





































var routes = [
    { path: "users", component: _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__["UserDashboardPage"] },
    { path: "resources", component: _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__["ResourceDashboardPage"] },
    { path: "lookup", component: _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__["LookupDashboardPage"] },
    { path: "laborcat", component: _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__["LaborCatDashboardPage"] },
    { path: "lcatgroup", component: _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__["LCATGroupDashboardPage"] },
    { path: "importpipe", component: _importpipe_importpipe_dashboard_component__WEBPACK_IMPORTED_MODULE_21__["ImportPipeDashboardPage"] },
    { path: "clients", component: _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__["ClientDashboardPage"] },
    { path: "accounts", component: _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__["AccountDashboardPage"] },
];
var AdminModule = /** @class */ (function () {
    function AdminModule() {
    }
    AdminModule.routes = routes;
    AdminModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _shared_shared_module__WEBPACK_IMPORTED_MODULE_5__["SharedModule"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
            declarations: [
                _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__["UserDashboardPage"],
                _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__["ResourceDashboardPage"],
                _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__["LaborCatDashboardPage"],
                _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__["ClientDashboardPage"],
                _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__["LCATGroupDashboardPage"],
                _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__["LookupDashboardPage"],
                _importpipe_importpipe_dashboard_component__WEBPACK_IMPORTED_MODULE_21__["ImportPipeDashboardPage"],
                _users_create_user_popup_component__WEBPACK_IMPORTED_MODULE_34__["CreateUserPopup"],
                _users_edit_user_popup_component__WEBPACK_IMPORTED_MODULE_35__["EditUserPopup"],
                _lookup_create_lookup_popup_component__WEBPACK_IMPORTED_MODULE_28__["CreateLookupPopup"],
                _lookup_edit_lookup_popup_component__WEBPACK_IMPORTED_MODULE_29__["EditLookupPopup"],
                _resources_create_resource_popup_component__WEBPACK_IMPORTED_MODULE_31__["CreateResourcePopup"],
                _resources_edit_resource_popup_component__WEBPACK_IMPORTED_MODULE_32__["EditResourcePopup"],
                _laborcat_create_laborcat_popup_component__WEBPACK_IMPORTED_MODULE_22__["CreateLaborCatPopup"],
                _laborcat_edit_laborcat_popup_component__WEBPACK_IMPORTED_MODULE_23__["EditLaborCatPopup"],
                _lcatgroup_create_lcatgroup_popup_component__WEBPACK_IMPORTED_MODULE_25__["CreateLCATGroupPopup"],
                _client_create_client_popup_component__WEBPACK_IMPORTED_MODULE_19__["CreateClientPopup"],
                _client_edit_client_popup_component__WEBPACK_IMPORTED_MODULE_20__["EditClientPopup"],
                _lcatgroup_edit_lcatgroup_popup_component__WEBPACK_IMPORTED_MODULE_26__["EditLCATGroupPopup"],
                _util_user_filter_pipe__WEBPACK_IMPORTED_MODULE_14__["UserFilterPipe"],
                _util_resource_filter_pipe__WEBPACK_IMPORTED_MODULE_13__["ResourceFilterPipe"],
                _util_laborcat_filter_pipe__WEBPACK_IMPORTED_MODULE_11__["LaborCatFilterPipe"],
                _util_lookup_filter_pipe__WEBPACK_IMPORTED_MODULE_12__["LookupFilterPipe"],
                _util_client_filter_pipe__WEBPACK_IMPORTED_MODULE_10__["ClientFilterPipe"],
                _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__["EditClientComponent"],
                _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__["DeleteClientComponent"],
                _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__["AccountDashboardPage"],
                _account_create_account_popup_component__WEBPACK_IMPORTED_MODULE_16__["CreateAccountPopup"],
                _account_edit_account_popup_component__WEBPACK_IMPORTED_MODULE_17__["EditAccountPopup"],
                _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__["EditAccountComponent"],
                _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__["DeleteAccountComponent"],
                _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__["EditUserComponent"],
                _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__["DeleteUserComponent"],
                _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__["EditResourceComponent"],
                _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__["DeleteResourceComponent"],
                _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__["EditLCATComponent"],
                _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__["DeleteLCATComponent"],
                _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__["EditLookupComponent"],
                _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__["DeleteLookupComponent"],
                _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__["EditLCATGroupComponent"],
                _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__["DeleteLCATGroupComponent"]
            ],
            providers: [
                _authentication_util_authorization_helper_util__WEBPACK_IMPORTED_MODULE_3__["AuthorizationHelper"],
                _login_services_auth_service__WEBPACK_IMPORTED_MODULE_4__["AuthService"],
                _services_admin_service__WEBPACK_IMPORTED_MODULE_6__["AdminService"],
                _services_role_service__WEBPACK_IMPORTED_MODULE_9__["RoleService"],
                _services_laborcat_service__WEBPACK_IMPORTED_MODULE_7__["LaborCategoryService"],
                _services_lookup_service__WEBPACK_IMPORTED_MODULE_8__["LookupService"]
            ],
            entryComponents: [
                _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__["EditClientComponent"],
                _client_client_dashboard_component__WEBPACK_IMPORTED_MODULE_18__["DeleteClientComponent"],
                _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__["EditAccountComponent"],
                _account_account_dashboard_component__WEBPACK_IMPORTED_MODULE_15__["DeleteAccountComponent"],
                _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__["EditUserComponent"],
                _users_user_dashboard_component__WEBPACK_IMPORTED_MODULE_36__["DeleteUserComponent"],
                _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__["EditResourceComponent"],
                _resources_resource_dashboard_component__WEBPACK_IMPORTED_MODULE_33__["DeleteResourceComponent"],
                _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__["EditLCATComponent"],
                _laborcat_laborcat_dashboard_component__WEBPACK_IMPORTED_MODULE_24__["DeleteLCATComponent"],
                _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__["EditLookupComponent"],
                _lookup_lookup_dashboard_component__WEBPACK_IMPORTED_MODULE_30__["DeleteLookupComponent"],
                _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__["EditLCATGroupComponent"],
                _lcatgroup_lcatgroup_dashboard_component__WEBPACK_IMPORTED_MODULE_27__["DeleteLCATGroupComponent"]
            ]
        })
    ], AdminModule);
    return AdminModule;
}());



/***/ }),

/***/ "./src/app/admin/components/client/client-dashboard.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/admin/components/client/client-dashboard.component.ts ***!
  \***********************************************************************/
/*! exports provided: EditClientComponent, DeleteClientComponent, ClientDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditClientComponent", function() { return EditClientComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteClientComponent", function() { return DeleteClientComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClientDashboardPage", function() { return ClientDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_client_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/client.service */ "./src/app/admin/services/client.service.ts");
/* harmony import */ var _models_client_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/client.model */ "./src/app/admin/models/client.model.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var EditClientComponent = /** @class */ (function () {
    function EditClientComponent() {
    }
    EditClientComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditClientComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditClient(this.params.data);
    };
    EditClientComponent.prototype.refresh = function () {
        return false;
    };
    EditClientComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Edit Client\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-client\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], EditClientComponent);
    return EditClientComponent;
}());

var DeleteClientComponent = /** @class */ (function () {
    function DeleteClientComponent() {
    }
    DeleteClientComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteClientComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectDeleteClient(this.params.data);
    };
    DeleteClientComponent.prototype.refresh = function () {
        return false;
    };
    DeleteClientComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Delete Client\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], DeleteClientComponent);
    return DeleteClientComponent;
}());

// con
var ClientDashboardPage = /** @class */ (function () {
    function ClientDashboardPage(clientService, router) {
        this.clientService = clientService;
        this.paginationPageSize = 20;
        this.dropdownData = [];
        this.delClientTitle = "Delete Client";
        this.delClientMessage = "Are you sure you want to delete Client?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditClientComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'Name',
                field: 'name',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "fw-semi-bold inactive" : "fw-semi-bold ";
                }
            },
            {
                headerName: 'Account',
                field: 'account',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Industry',
                field: 'industry',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Sector',
                field: 'sector',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteClientComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
        this.showCreateClient = false;
        this.showEditClient = false;
        this.showDeleteClient = false;
        this.selClientId = 1;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    ClientDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input, #search-countries");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        this.loadAllClients();
    };
    ClientDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    ClientDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadClients) {
            this.busyLoadClients.unsubscribe();
        }
        if (this.busyDeleteClient) {
            this.busyDeleteClient.unsubscribe();
        }
    };
    ClientDashboardPage.prototype.ngAfterViewInit = function () {
    };
    ClientDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    ClientDashboardPage.prototype.loadAllClients = function () {
        var _this = this;
        var that = this;
        this.busyLoadClients = this.clientService.getAll().subscribe(function (clientdata) {
            if (clientdata) {
                that.data = clientdata;
                that.gridApi.sizeColumnsToFit();
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    ClientDashboardPage.prototype.reloadClients = function (reload) {
        this.showCreateClient = false;
        this.showEditClient = false;
        if (reload) {
            this.loadAllClients();
        }
        else {
            this.selClient = new _models_client_model__WEBPACK_IMPORTED_MODULE_3__["Client"]();
        }
    };
    ClientDashboardPage.prototype.deleteClient = function (id) {
        var _this = this;
        this.busyDeleteClient = this.clientService.deleteClientById(id).subscribe(function (data) {
            if (data) {
                _this.reloadClients(true);
                _this.showDeleteClient = false;
                jQuery('#confirm-popup').modal('hide');
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    ClientDashboardPage.prototype.addClient = function () {
        this.showCreateClient = true;
    };
    ClientDashboardPage.prototype.selectEditClient = function (client) {
        this.showEditClient = true;
        this.selClient = client;
    };
    ClientDashboardPage.prototype.selectDeleteClient = function (client) {
        this.showDeleteClient = true;
        this.selClient = client;
    };
    ClientDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    ClientDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "client-dashboard",
            template: __webpack_require__(/*! ./client-dashboard.template.html */ "./src/app/admin/components/client/client-dashboard.template.html"),
            providers: [_services_client_service__WEBPACK_IMPORTED_MODULE_2__["ClientService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./client-dashboard.styles.scss */ "./src/app/admin/components/client/client-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_client_service__WEBPACK_IMPORTED_MODULE_2__["ClientService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], ClientDashboardPage);
    return ClientDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/client/client-dashboard.styles.scss":
/*!**********************************************************************!*\
  !*** ./src/app/admin/components/client/client-dashboard.styles.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.clientdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n.ag-row .ag-cell {\n  display: -webkit-box;\n  display: flex;\n  -webkit-box-align: center;\n          align-items: center; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/client/client-dashboard.template.html":
/*!************************************************************************!*\
  !*** ./src/app/admin/components/client/client-dashboard.template.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">Clients</h1>\r\n<div data-ng-controller=\"clientdashboardController\" class=\"clientdashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-10\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-client\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-client\" title=\"Add Client\"\r\n                                    (click)=\"addClient()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Add Client\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid-wrapper\">\r\n                        <ag-grid-angular\r\n                            #agGrid\r\n                            style=\"width: 100%; height: 650px;\"\r\n                            class=\"ag-theme-balham\"\r\n                            [rowData]=\"data\"\r\n                            [columnDefs]=\"columnDefs\"\r\n                            [defaultColDef]=\"defaultColDef\"\r\n                            [gridOptions]=\"gridOptions\"\r\n                            [floatingFilter]=\"true\"\r\n                            [pagination]=\"true\"\r\n                            (gridReady)=\"onGridReady($event)\"\r\n                            [paginationAutoPageSize]=\"true\"\r\n                            >\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </div>\r\n                <div class=\"widget-footer\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-xs-12\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary\"\r\n                                    (click)=\"onClickBackButton()\">\r\n                                    <span class=\"glyphicon glyphicon-chevron-left txt-gap\"\r\n                                        aria-hidden=\"true\"></span>Back</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showCreateClient\" create-client-popup [ClientId]=\"selClientId\" (reloadClients)=\"reloadClients($event)\"></div>\r\n    <div *ngIf=\"showEditClient\" edit-client-popup [model]=\"selClient\" (reloadClients)=\"reloadClients($event)\"></div>\r\n    <div *ngIf=\"showDeleteClient\" confirm-popup-ph [model]=\"selClient\" (callBack)=\"deleteClient(selClient.clientId)\"\r\n    (hideModal)=\"showDeleteClient = false\" [msg]=\"'Are you sure you want to delete Client '+ selClient.name+' ?'\"\r\n    [title]=\"'Delete Client'\" >\r\n</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/client/create-client-popup.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/admin/components/client/create-client-popup.component.ts ***!
  \**************************************************************************/
/*! exports provided: CreateClientPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateClientPopup", function() { return CreateClientPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_client_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/client.model */ "./src/app/admin/models/client.model.ts");
/* harmony import */ var _services_account_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/account.service */ "./src/app/admin/services/account.service.ts");
/* harmony import */ var _services_client_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/client.service */ "./src/app/admin/services/client.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Component for creating a labor category
*/





var CreateClientPopup = /** @class */ (function () {
    function CreateClientPopup(router, clientService, accountService) {
        this.clientService = clientService;
        this.accountService = accountService;
        this.reloadClients = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.client = new _models_client_model__WEBPACK_IMPORTED_MODULE_2__["Client"]();
        this.lstAccounts = [];
        this.clientenabled = true;
        this.router = router;
        this.alerts = [
            {
                type: 'warning',
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    CreateClientPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
        this.loadAllAccounts();
    };
    CreateClientPopup.prototype.ngOnDestroy = function () {
        if (this.busySaveClient) {
            this.busySaveClient.unsubscribe();
        }
        if (this.busyLoadAccounts) {
            this.busyLoadAccounts.unsubscribe();
        }
    };
    CreateClientPopup.prototype.loadAllAccounts = function () {
        var _this = this;
        var that = this;
        this.busyLoadAccounts = this.accountService.getAll().subscribe(function (accountdata) {
            if (accountdata) {
                that.lstAccounts = accountdata;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    CreateClientPopup.prototype.createClient = function (newClient) {
        var _this = this;
        jQuery('#addclientform').parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery('#addclientform').parsley().isValid()) {
            newClient.enabled = (this.clientenabled) ? 'Y' : 'N';
            this.busySaveClient = this.clientService.saveClient(newClient).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                    _this.reloadClients.emit(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    CreateClientPopup.prototype.reset = function (flag) {
        jQuery('#create-client').on('hidden').find('#name').val('');
        jQuery('#addclientform').parsley().reset();
        jQuery('#create-client').modal('hide');
        this.showErrorFlag = false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateClientPopup.prototype, "reloadClients", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], CreateClientPopup.prototype, "ClientId", void 0);
    CreateClientPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: '[create-client-popup]',
            template: __webpack_require__(/*! ./create-client-popup.template.html */ "./src/app/admin/components/client/create-client-popup.template.html"),
            providers: [_services_account_service__WEBPACK_IMPORTED_MODULE_3__["AccountService"], _services_client_service__WEBPACK_IMPORTED_MODULE_4__["ClientService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./create-client-popup.styles.scss */ "./src/app/admin/components/client/create-client-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateClientPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_client_service__WEBPACK_IMPORTED_MODULE_4__["ClientService"],
            _services_account_service__WEBPACK_IMPORTED_MODULE_3__["AccountService"]])
    ], CreateClientPopup);
    return CreateClientPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/client/create-client-popup.styles.scss":
/*!*************************************************************************!*\
  !*** ./src/app/admin/components/client/create-client-popup.styles.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/client/create-client-popup.template.html":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/client/create-client-popup.template.html ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-client\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-client-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-client-title\">Add Client</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"addclientform\" #addclientform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"name\" class=\"col-md-2 form-control-label text-md-right\">Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"client.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Name is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Accounts -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"cli-acc\" class=\"col-md-2 form-control-label text-md-right\">Accounts\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"client.accountId\" title=\"Account\" name=\"Account\" class=\"form-control fdatable\" id=\"cli-acc\"\r\n\t\t\t\t\t\t\tplaceholder=\"Select Account\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Account is required\">\r\n\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t<option *ngFor=\"let acc of lstAccounts\" [ngValue]=\"acc.accountId\">{{acc.name}}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"clientenabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createClient(client)\">Save Client</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/client/edit-client-popup.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/admin/components/client/edit-client-popup.component.ts ***!
  \************************************************************************/
/*! exports provided: EditClientPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditClientPopup", function() { return EditClientPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_account_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/account.service */ "./src/app/admin/services/account.service.ts");
/* harmony import */ var _services_client_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/client.service */ "./src/app/admin/services/client.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Componentfor adding contact as a popup.
*/




var EditClientPopup = /** @class */ (function () {
    function EditClientPopup(router, clientService, accountService) {
        this.clientService = clientService;
        this.accountService = accountService;
        this.reloadClients = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.lstAccounts = [];
        this.clientenabled = true;
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.loadAllAccounts();
    }
    EditClientPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    EditClientPopup.prototype.ngOnDestroy = function () {
        if (this.busySaveClient) {
            this.busySaveClient.unsubscribe();
        }
        if (this.busyLoadAccounts) {
            this.busyLoadAccounts.unsubscribe();
        }
    };
    // Update labor cat
    EditClientPopup.prototype.updateClient = function (client) {
        var _this = this;
        jQuery("#editclientform").parsley().validate();
        client.enabled = (this.clientenabled) ? 'Y' : 'N';
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#editclientform").parsley().isValid()) {
            this.busySaveClient = this.clientService.saveClient(client).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    EditClientPopup.prototype.reset = function (flag) {
        jQuery("#edit-client").on("hidden").find("#name").val("");
        jQuery("#editclientform").parsley().reset();
        jQuery("#edit-client").modal("hide");
        this.reloadClients.emit(flag);
        this.showErrorFlag = false;
    };
    EditClientPopup.prototype.loadAllAccounts = function () {
        var _this = this;
        var that = this;
        this.busyLoadAccounts = this.accountService.getAll().subscribe(function (accountdata) {
            if (accountdata) {
                that.lstAccounts = accountdata;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    EditClientPopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editClient = Object.assign({}, chg.currentValue);
                    this.clientenabled = (this.editClient.enabled === 'Y') ? true : false;
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], EditClientPopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditClientPopup.prototype, "reloadClients", void 0);
    EditClientPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-client-popup]",
            template: __webpack_require__(/*! ./edit-client-popup.template.html */ "./src/app/admin/components/client/edit-client-popup.template.html"),
            providers: [_services_account_service__WEBPACK_IMPORTED_MODULE_2__["AccountService"], _services_client_service__WEBPACK_IMPORTED_MODULE_3__["ClientService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./edit-client-popup.styles.scss */ "./src/app/admin/components/client/edit-client-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditClientPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_client_service__WEBPACK_IMPORTED_MODULE_3__["ClientService"],
            _services_account_service__WEBPACK_IMPORTED_MODULE_2__["AccountService"]])
    ], EditClientPopup);
    return EditClientPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/client/edit-client-popup.styles.scss":
/*!***********************************************************************!*\
  !*** ./src/app/admin/components/client/edit-client-popup.styles.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/client/edit-client-popup.template.html":
/*!*************************************************************************!*\
  !*** ./src/app/admin/components/client/edit-client-popup.template.html ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-client\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-client-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-client-title\">Edit Client</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"editclientform\" #editclientform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"name\" class=\"col-md-2 form-control-label text-md-right\">Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"editClient.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Name is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Account -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"cli-acc\" class=\"col-md-2 form-control-label text-md-right\">Account\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"editClient.accountId\" title=\"Account\" name=\"Account\" class=\"form-control fdatable\" id=\"cli-acc\"\r\n\t\t\t\t\t\t\tplaceholder=\"Select Account\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Account is required\">\r\n\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t<option *ngFor=\"let acc of lstAccounts\" [ngValue]=\"acc.accountId\">{{acc.name}}</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"clientenabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateClient(editClient)\">Save Client</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/importpipe/importpipe-dashboard.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/admin/components/importpipe/importpipe-dashboard.component.ts ***!
  \*******************************************************************************/
/*! exports provided: ImportPipeDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImportPipeDashboardPage", function() { return ImportPipeDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! xlsx */ "./node_modules/xlsx/xlsx.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/admin.service */ "./src/app/admin/services/admin.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






// con
var ImportPipeDashboardPage = /** @class */ (function () {
    function ImportPipeDashboardPage(adminService, router) {
        this.adminService = adminService;
        this.toggleProjectImportStatusTitle = "Imported Pipeline Project Status";
        this.toggleProjectImportStatusMessage = "Are you sure you want to toggle Imported Pipeline Project Status?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.columns = [
            { name: 'flag', type: 'none' }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
    }
    ImportPipeDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input, #search-countries");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        this.loadImportedPipelineProjects();
    };
    ImportPipeDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadPipelineProjects) {
            this.busyLoadPipelineProjects.unsubscribe();
        }
        if (this.busyImportingProjectsFromPipeline) {
            this.busyImportingProjectsFromPipeline.unsubscribe();
        }
        if (this.busyTogglePipelineProjectStatus) {
            this.busyTogglePipelineProjectStatus.unsubscribe();
        }
    };
    ImportPipeDashboardPage.prototype.ngAfterViewInit = function () {
        for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {
            var col = _a[_i];
            if (col.filtering) {
                this.cosmeticFix('#filter-' + col.name);
            }
        }
    };
    ImportPipeDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    ImportPipeDashboardPage.prototype.loadImportedPipelineProjects = function () {
        var _this = this;
        var that = this;
        this.busyLoadPipelineProjects = this.adminService.getImportedPipelineProjects().subscribe(function (projdata) {
            if (projdata) {
                that.data = projdata;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    ImportPipeDashboardPage.prototype.toggleProjectImportStatus = function (selproj) {
        var _this = this;
        var that = this;
        this.busyTogglePipelineProjectStatus = this.adminService.togglePipelineProjectImportStatus(selproj).subscribe(function (projdata) {
            if (projdata) {
                that.loadImportedPipelineProjects();
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    ImportPipeDashboardPage.prototype.addimportproject = function (selproj) {
        var _this = this;
        var that = this;
        this.busyImportingProjectsFromPipeline = this.adminService.addPipelineProject(selproj).subscribe(function (projdata) {
            if (projdata) {
                that.loadImportedPipelineProjects();
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    ImportPipeDashboardPage.prototype.importPipelineProjects = function () {
        var _this = this;
        var that = this;
        this.busyImportingProjectsFromPipeline = this.adminService.addRemainingPipelineProjects().subscribe(function (projdata) {
            if (projdata) {
                that.loadImportedPipelineProjects();
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    ImportPipeDashboardPage.prototype.s2ab = function (s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i !== s.length; ++i)
            view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    };
    ImportPipeDashboardPage.prototype.exportLaborCategoriesReport = function (data, filename, sheetName) {
        var ws = xlsx__WEBPACK_IMPORTED_MODULE_4__["utils"].json_to_sheet(data);
        var wb = xlsx__WEBPACK_IMPORTED_MODULE_4__["utils"].book_new();
        xlsx__WEBPACK_IMPORTED_MODULE_4__["utils"].book_append_sheet(wb, ws, sheetName);
        /* save to file */
        var wbout = xlsx__WEBPACK_IMPORTED_MODULE_4__["write"](wb, { bookType: 'xlsx', type: 'binary' });
        Object(file_saver__WEBPACK_IMPORTED_MODULE_3__["saveAs"])(new Blob([this.s2ab(wbout)]), filename);
    };
    ImportPipeDashboardPage.prototype.downloadLaborCategories = function () {
        this.exportLaborCategoriesReport(this.data, 'laborcat-report.xlsx', 'Labor Categories');
    };
    ImportPipeDashboardPage.prototype.onChangeTable = function (filterinfo) {
        // if(filterinfo){
        //     if(filterinfo.columnName === "code"){
        //         this.laborcatfilter.codeFilter = filterinfo.filterString;
        //         this.laborcatfilter.codeFilter = this.laborcatfilter.codeFilter.trim();
        //     }
        //     if(filterinfo.refresh){
        //         this.refreshLaborCatFilterObject();
        //     }
        // }
    };
    ImportPipeDashboardPage.prototype.FilterSelectionChanged = function (event, filterColumnName) {
    };
    ImportPipeDashboardPage.prototype.ApplyFilter = function () {
        // this.refreshLaborCatFilterObject();
    };
    ImportPipeDashboardPage.prototype.updateFilterTextBox = function (colName, colText) {
        var rowIndex = lodash__WEBPACK_IMPORTED_MODULE_2__["findIndex"](this.columns, function (o) { return (o.name && o.name.toString() === colName); });
        if (rowIndex !== -1) {
            var selRow = this.columns[rowIndex];
            if (selRow.filtering) {
                selRow.filtering.filterString = colText;
            }
        }
    };
    ImportPipeDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "importpipe-dashboard",
            template: __webpack_require__(/*! ./importpipe-dashboard.template.html */ "./src/app/admin/components/importpipe/importpipe-dashboard.template.html"),
            providers: [_services_admin_service__WEBPACK_IMPORTED_MODULE_5__["AdminService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./importpipe-dashboard.styles.scss */ "./src/app/admin/components/importpipe/importpipe-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_admin_service__WEBPACK_IMPORTED_MODULE_5__["AdminService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], ImportPipeDashboardPage);
    return ImportPipeDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/importpipe/importpipe-dashboard.styles.scss":
/*!******************************************************************************!*\
  !*** ./src/app/admin/components/importpipe/importpipe-dashboard.styles.scss ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.userdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/importpipe/importpipe-dashboard.template.html":
/*!********************************************************************************!*\
  !*** ./src/app/admin/components/importpipe/importpipe-dashboard.template.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">Pipeline Projects Imported</h1>\r\n<div data-ng-controller=\"laborcatdashboardController\" class=\"laborcatdashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-10\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                                <!-- <div class=\"form-group row\">\r\n                                    <label for=\"tdl-pop\" class=\"col-md-6 form-control-label text-md-right mt10\">\r\n                                        Imported Pipeline Projects\r\n                                    </label>\r\n                                    <div role=\"alert\" class=\"col-md-6 col-xs-12\">\r\n                                        <select required class=\"form-control\" placeholder=\"\" [(ngModel)]=\"selLCATGroupId\"\r\n                                            [ngModelOptions]=\"{standalone: true}\" (change)=\"onLCATGroupChanged($event.target.value)\"\r\n                                            data-parsley-required-message=\"Error: Reference Type is required\">\r\n                                            <option *ngFor=\"let lg of lcatGroups\" [value]=\"lg.groupId\">{{lg.name}}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div> -->\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-user\" type=\"button\" class=\"btn btn-outline-primary\" title=\"Import Projects\"\r\n                                    [ngBusy]=\"{busy: busyImportingProjectsFromPipeline, message: 'Importing Projects From Pipeline...', backdrop: false}\"\r\n                                    (click)=\"importPipelineProjects()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Import Projects\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <table class=\"table table-hover\" [mfData]=\"data\" [ngBusy]=\"{busy: busyLoadPipelineProjects, message: 'Loading Imported Pipeline Projects...', backdrop: false}\"\r\n                        #mf=\"mfDataTable\" [mfRowsOnPage]=\"25\" [mfActivePage]=\"1\" [mfIsServerPagination]=\"false\" style=\"cursor: pointer;\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th></th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"projectName\" title=\"Code\">Project</mfDefaultSorter>\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"accountName\" title=\"Client\">Client</mfDefaultSorter>\r\n                                </th>\r\n                                <th>\r\n                                    <mfDefaultSorter by=\"offerPortfolio\" title=\"Client\">OP</mfDefaultSorter>\r\n                                </th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"startDate\" title=\"Start Date\">Start Date</mfDefaultSorter>\r\n                                </th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"endDate\" title=\"End Date\">End Date</mfDefaultSorter>\r\n                                </th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"deliveryManager\" title=\"CDM\">CDM</mfDefaultSorter>\r\n                                </th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"headCountEstimate\" title=\"Headcount\">Headcount</mfDefaultSorter>\r\n                                </th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"winPercent\" title=\"Probability\">Probability</mfDefaultSorter>\r\n                                </th>\r\n                                <th class=\"hidden-sm-down\">\r\n                                    <mfDefaultSorter by=\"status\" title=\"Status\">Status</mfDefaultSorter>\r\n                                </th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td *ngFor=\"let column of columns\">\r\n                                    <div *ngIf=\"column.filtering\" class=\"input-group input-group-transparent input-group-rounded\">\r\n                                        <span class=\"input-group-addon\">\r\n                                            <i class=\"fa fa-filter\" (click)=\"ApplyFilter();\"></i>\r\n                                        </span>\r\n                                        <input *ngIf=\"column.type==='input'\" [attr.id]=\"'filter-' + column.name\"\r\n                                            [ngTableFiltering]=\"column.filtering\" [config]=\"column.filtering\" class=\"form-control\"\r\n                                            [style.width.px]=\"column?.width\" placeholder=\"{{column.filtering.placeholder}}\"\r\n                                            value=\"{{column.filtering.filterString}}\" (tableChanged)=\"onChangeTable($event)\" />\r\n                                        <select *ngIf=\"column.type==='select'\" [attr.id]=\"'filter-' + column.name\"\r\n                                            class=\"form-control\" (change)=\"FilterSelectionChanged($event.target.value, column.name)\">\r\n                                            <option *ngFor=\"let option of column.options\" [selected]=\"(option.value === column.defaultvalue)\"\r\n                                                [value]=\"option.value\">\r\n                                                {{option.name}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                            <tr *ngFor=\"let proj of mf.data; let i= index\" style=\"cursor: pointer;\">\r\n                                <td>\r\n                                    <i *ngIf=\"proj.processed !== 'Y'\"  class=\"glyphicon glyphicon-plus\" (click)=\"addimportproject(proj)\" data-toggle=\"modal\"\r\n                                        data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-laborcat\"></i>\r\n                                </td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.projectName}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.accountName}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.offerPortfolio}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.startDate}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.endDate}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.deliveryManager}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.headCountEstimate}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.winPercent}}</span></td>\r\n                                <td><span [ngClass]=\"{'inactive': proj.processed === 'Y'}\">{{proj.status}}</span></td>\r\n                                <td>\r\n                                    <i class=\"glyphicon glyphicon-off txt-gap\" mwlConfirmationPopover [popoverTitle]=\"toggleProjectImportStatusTitle\"\r\n                                        [popoverMessage]=\"toggleProjectImportStatusMessage\" placement=\"left\" (confirm)=\"toggleProjectImportStatus(proj)\"\r\n                                        (cancel)=\"cancelClicked = true\">\r\n                                    </i>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td colspan=\"12\">\r\n                                    <mfBootstrapPaginator [rowsOnPageSet]=\"[15, 25, 50]\"></mfBootstrapPaginator>\r\n                                </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/laborcat/create-laborcat-popup.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/create-laborcat-popup.component.ts ***!
  \******************************************************************************/
/*! exports provided: CreateLaborCatPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateLaborCatPopup", function() { return CreateLaborCatPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_laborcat_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/laborcat.model */ "./src/app/admin/models/laborcat.model.ts");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Component for creating a labor category
*/




var CreateLaborCatPopup = /** @class */ (function () {
    function CreateLaborCatPopup(router, _laborCatService) {
        this._laborCatService = _laborCatService;
        this.reloadLaborCategories = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.laborCat = new _models_laborcat_model__WEBPACK_IMPORTED_MODULE_2__["LaborCategory"]();
        this.laborCategories = [];
        this.listSkills = [];
        this.router = router;
        this.alerts = [
            {
                type: 'warning',
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.showLaborCategories();
        this.loadLCATSkills();
    }
    CreateLaborCatPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    CreateLaborCatPopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
        if (this.busyLoadSkills) {
            this.busyLoadSkills.unsubscribe();
        }
        if (this.busyLoadLaborCategories) {
            this.busyLoadLaborCategories.unsubscribe();
        }
    };
    // Create a new Labor Cat
    CreateLaborCatPopup.prototype.createLaborCat = function (laborCat) {
        var _this = this;
        jQuery('#addlaborcatform').parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery('#addlaborcatform').parsley().isValid()) {
            laborCat.groupId = this.LCATGroupId;
            this.busy = this._laborCatService.saveLaborCategory(laborCat).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                    _this.reloadLaborCategories.emit(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    CreateLaborCatPopup.prototype.reset = function (flag) {
        jQuery('#create-laborcat').on('hidden').find('#code').val('');
        jQuery('#create-laborcat').on('hidden').find('#description').val('');
        jQuery("#create-laborcat").on("hidden").find("#base-rate").val("");
        jQuery("#create-laborcat").on("hidden").find("#op1-rate").val("");
        jQuery("#create-laborcat").on("hidden").find("#op2-rate").val("");
        jQuery("#create-laborcat").on("hidden").find("#op3-rate").val("");
        jQuery("#create-laborcat").on("hidden").find("#op4-rate").val("");
        jQuery("#create-laborcat").on("hidden").find("#op5-rate").val("");
        jQuery('#addlaborcatform').parsley().reset();
        jQuery('#create-laborcat').modal('hide');
        this.showErrorFlag = false;
    };
    CreateLaborCatPopup.prototype.loadLCATSkills = function () {
        var _this = this;
        this._laborCatService.getAllLCATSkills().subscribe(function (data) {
            _this.listSkills = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    CreateLaborCatPopup.prototype.showLaborCategories = function () {
        var _this = this;
        this.busyLoadLaborCategories = this._laborCatService.getAll().subscribe(function (data) {
            _this.laborCategories = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateLaborCatPopup.prototype, "reloadLaborCategories", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], CreateLaborCatPopup.prototype, "LCATGroupId", void 0);
    CreateLaborCatPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: '[create-laborcat-popup]',
            template: __webpack_require__(/*! ./create-laborcat-popup.template.html */ "./src/app/admin/components/laborcat/create-laborcat-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./create-laborcat-popup.styles.scss */ "./src/app/admin/components/laborcat/create-laborcat-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateLaborCatPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_laborcat_service__WEBPACK_IMPORTED_MODULE_3__["LaborCategoryService"]])
    ], CreateLaborCatPopup);
    return CreateLaborCatPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/laborcat/create-laborcat-popup.styles.scss":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/create-laborcat-popup.styles.scss ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/laborcat/create-laborcat-popup.template.html":
/*!*******************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/create-laborcat-popup.template.html ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-laborcat\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-laborcat-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-laborcat-title\">Add Labor Category</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"addlaborcatform\" #addlaborcatform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Code -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"code\" class=\"col-md-2 form-control-label text-md-right\">Code\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"code\" [(ngModel)]=\"laborCat.code\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Code is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Description -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"description\" class=\"col-md-2 form-control-label text-md-right\">Description\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"description\" [(ngModel)]=\"laborCat.description\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Description is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Primary Skill -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<label for=\"res-skill\" class=\"col-md-4 form-control-label text-md-right\">\r\n\t\t\t\t\t\t\tPrimary Skill\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"laborCat.skillCode\" title=\"Primary Skill\" name=\"primary-skill\" class=\"form-control fdatable\" id=\"res-lead\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Select Team Lead\"\r\n\t\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Primary skill is required\">\r\n\t\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let res of listSkills\" [ngValue]=\"res.code\">{{res.value}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Base Rate -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"base-rate\" class=\"col-md-2 form-control-label text-md-right\">Base Rate\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"base-rate\" [(ngModel)]=\"laborCat.baseRate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Base Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- OP1 Rate Rate -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op1-rate\" class=\"col-md-2 form-control-label text-md-right\">OP1 Rate\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op1-rate\" [(ngModel)]=\"laborCat.op1Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: OP1 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- OP2 Rate Rate -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op2-rate\" class=\"col-md-2 form-control-label text-md-right\">OP2 Rate\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op2-rate\" [(ngModel)]=\"laborCat.op2Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: OP2 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- OP3 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op3-rate\" class=\"col-md-2 form-control-label text-md-right\">OP3 Rate\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op3-rate\" [(ngModel)]=\"laborCat.op3Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: OP3 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- OP4 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op4-rate\" class=\"col-md-2 form-control-label text-md-right\">OP4 Rate\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op4-rate\" [(ngModel)]=\"laborCat.op4Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: OP4 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- OP5 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op5-rate\" class=\"col-md-2 form-control-label text-md-right\">OP5 Rate\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op5-rate\" [(ngModel)]=\"laborCat.op5Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: OP5 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"laborCat.enabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createLaborCat(laborCat)\">Save Labor Category</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/laborcat/edit-laborcat-popup.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/edit-laborcat-popup.component.ts ***!
  \****************************************************************************/
/*! exports provided: EditLaborCatPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditLaborCatPopup", function() { return EditLaborCatPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Componentfor adding contact as a popup.
*/



var EditLaborCatPopup = /** @class */ (function () {
    function EditLaborCatPopup(router, _laborCatService) {
        this._laborCatService = _laborCatService;
        this.reloadLaborCategories = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.laborCategories = [];
        this.listSkills = [];
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.showLaborCategories();
        this.loadLCATSkills();
    }
    EditLaborCatPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    EditLaborCatPopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
        if (this.busyLoadSkills) {
            this.busyLoadSkills.unsubscribe();
        }
        if (this.busyLoadLaborCategories) {
            this.busyLoadLaborCategories.unsubscribe();
        }
    };
    // Update labor cat
    EditLaborCatPopup.prototype.updateLaborCat = function (laborCat) {
        var _this = this;
        jQuery("#editlaborcatform").parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#editlaborcatform").parsley().isValid()) {
            laborCat.code = laborCat.code.toUpperCase();
            this.busy = this._laborCatService.saveLaborCategory(laborCat).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    EditLaborCatPopup.prototype.reset = function (flag) {
        jQuery("#edit-laborcat").on("hidden").find("#code").val("");
        jQuery("#edit-laborcat").on("hidden").find("#description").val("");
        jQuery("#edit-laborcat").on("hidden").find("#base-rate").val("");
        jQuery("#edit-laborcat").on("hidden").find("#op1-rate").val("");
        jQuery("#edit-laborcat").on("hidden").find("#op2-rate").val("");
        jQuery("#edit-laborcat").on("hidden").find("#op3-rate").val("");
        jQuery("#edit-laborcat").on("hidden").find("#op4-rate").val("");
        jQuery("#edit-laborcat").on("hidden").find("#op5-rate").val("");
        jQuery("#editlaborcatform").parsley().reset();
        jQuery("#edit-laborcat").modal("hide");
        this.reloadLaborCategories.emit(flag);
        this.showErrorFlag = false;
    };
    EditLaborCatPopup.prototype.loadLCATSkills = function () {
        var _this = this;
        this._laborCatService.getAllLCATSkills().subscribe(function (data) {
            _this.listSkills = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    EditLaborCatPopup.prototype.showLaborCategories = function () {
        var _this = this;
        this._laborCatService.getAll().subscribe(function (data) {
            _this.laborCategories = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    EditLaborCatPopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editLaborCat = Object.assign({}, chg.currentValue);
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], EditLaborCatPopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditLaborCatPopup.prototype, "reloadLaborCategories", void 0);
    EditLaborCatPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-laborcat-popup]",
            template: __webpack_require__(/*! ./edit-laborcat-popup.template.html */ "./src/app/admin/components/laborcat/edit-laborcat-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./edit-laborcat-popup.styles.scss */ "./src/app/admin/components/laborcat/edit-laborcat-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditLaborCatPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_laborcat_service__WEBPACK_IMPORTED_MODULE_2__["LaborCategoryService"]])
    ], EditLaborCatPopup);
    return EditLaborCatPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/laborcat/edit-laborcat-popup.styles.scss":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/edit-laborcat-popup.styles.scss ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/laborcat/edit-laborcat-popup.template.html":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/edit-laborcat-popup.template.html ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-laborcat\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-laborcat-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-laborcat-title\">Edit Labor Category</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"editlaborcatform\" #editlaborcatform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Code -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"code\" class=\"col-md-2 form-control-label text-md-right\">Code\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"code\" [(ngModel)]=\"editLaborCat.code\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Code is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Description -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"description\" class=\"col-md-2 form-control-label text-md-right\">Description\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"description\" [(ngModel)]=\"editLaborCat.description\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Description is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Primary Skill -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<label for=\"res-skill\" class=\"col-md-4 form-control-label text-md-right\">\r\n\t\t\t\t\t\t\tPrimary Skill\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select required [(ngModel)]=\"editLaborCat.skillCode\" title=\"Primary Skill\" name=\"primary-skill\" class=\"form-control fdatable\" id=\"res-lead\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Select Team Lead\"\r\n\t\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Primary skill is required\">\r\n\t\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let res of listSkills\" [ngValue]=\"res.code\">{{res.value}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t\t<!-- Base Rate -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"base-rate\" class=\"col-md-2 form-control-label text-md-right\">Base Rate\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"base-rate\" [(ngModel)]=\"editLaborCat.baseRate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Base Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- OP1 Rate Rate -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op1-rate\" class=\"col-md-2 form-control-label text-md-right\">OP1 Rate\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op1-rate\" [(ngModel)]=\"editLaborCat.op1Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: OP1 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- OP2 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op2-rate\" class=\"col-md-2 form-control-label text-md-right\">OP2 Rate\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op2-rate\" [(ngModel)]=\"editLaborCat.op2Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: OP2 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- OP3 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op3-rate\" class=\"col-md-2 form-control-label text-md-right\">OP3 Rate\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op3-rate\" [(ngModel)]=\"editLaborCat.op3Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: OP3 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- OP4 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op4-rate\" class=\"col-md-2 form-control-label text-md-right\">OP4 Rate\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op4-rate\" [(ngModel)]=\"editLaborCat.op4Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: OP4 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- OP5 Rate Rate -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"op1-rate\" class=\"col-md-2 form-control-label text-md-right\">OP5 Rate\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"op5-rate\" [(ngModel)]=\"editLaborCat.op5Rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: OP5 Rate is required\" ng-pattern=\"/^[0-9]+(\\.[0-9]{1,2})?$/\" step=\"0.01\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"editLaborCat.enabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateLaborCat(editLaborCat)\">Save Labor Category</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/laborcat/laborcat-dashboard.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/laborcat-dashboard.component.ts ***!
  \***************************************************************************/
/*! exports provided: EditLCATComponent, DeleteLCATComponent, LaborCatDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditLCATComponent", function() { return EditLCATComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteLCATComponent", function() { return DeleteLCATComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LaborCatDashboardPage", function() { return LaborCatDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
/* harmony import */ var _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/lcatgroup.service */ "./src/app/admin/services/lcatgroup.service.ts");
/* harmony import */ var _models_laborcat_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/laborcat.model */ "./src/app/admin/models/laborcat.model.ts");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var EditLCATComponent = /** @class */ (function () {
    function EditLCATComponent() {
    }
    EditLCATComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditLCATComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditLaborCategory(this.params.data);
    };
    EditLCATComponent.prototype.refresh = function () {
        return false;
    };
    EditLCATComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Edit Labor Category\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-laborcat\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], EditLCATComponent);
    return EditLCATComponent;
}());

var DeleteLCATComponent = /** @class */ (function () {
    function DeleteLCATComponent() {
    }
    DeleteLCATComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteLCATComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.deleteLaborCategory(this.params.data);
    };
    DeleteLCATComponent.prototype.refresh = function () {
        return false;
    };
    DeleteLCATComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Delete Labor Category\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], DeleteLCATComponent);
    return DeleteLCATComponent;
}());

// con
var LaborCatDashboardPage = /** @class */ (function () {
    function LaborCatDashboardPage(_laborCatService, _lcatGroupService, router) {
        this._laborCatService = _laborCatService;
        this._lcatGroupService = _lcatGroupService;
        this.dropdownData = [];
        this.delLaborCategoryTitle = "Delete Labor Category";
        this.delLaborCategoryMessage = "Are you sure you want to delete Labor Category?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditLCATComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'Code',
                field: 'code',
                cellClass: function (params) {
                    return params.data.enabled === false ? "fw-semi-bold inactive" : "fw-semi-bold ";
                }
            },
            {
                headerName: 'Description',
                field: 'description',
                cellClass: function (params) {
                    return params.data.enabled === false ? "inactive" : "";
                }
            },
            {
                headerName: 'Skill',
                field: 'skillName',
                cellClass: function (params) {
                    return params.data.enabled === false ? "inactive" : "";
                }
            },
            {
                headerName: 'Base Rate',
                field: 'baseRate',
                cellClass: function (params) {
                    return params.data.enabled === false ? "inactive" : "";
                }
            },
            {
                headerName: 'Active',
                field: 'enabled',
                cellClass: function (params) {
                    return params.data.enabled === false ? "inactive" : "";
                }
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteLCATComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
        this.showCreateLaborCategory = false;
        this.showEditLaborCategory = false;
        this.selLCATGroupId = 1;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    LaborCatDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input, #search-countries");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        this.loadLCATGroups();
    };
    LaborCatDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadLaborCategories) {
            this.busyLoadLaborCategories.unsubscribe();
        }
        if (this.busyDeleteLaborCategory) {
            this.busyDeleteLaborCategory.unsubscribe();
        }
        if (this.busyLoadLCATGroups) {
            this.busyLoadLCATGroups.unsubscribe();
        }
    };
    LaborCatDashboardPage.prototype.ngAfterViewInit = function () {
    };
    LaborCatDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    LaborCatDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    LaborCatDashboardPage.prototype.loadLCATGroups = function () {
        var _this = this;
        var that = this;
        this.busyLoadLCATGroups = this._lcatGroupService.getAll().subscribe(function (lcg) {
            if (lcg) {
                that.lcatGroups = lcg;
                that.loadLaborCategories(_this.selLCATGroupId);
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    LaborCatDashboardPage.prototype.loadLaborCategories = function (groupId) {
        var _this = this;
        this.busyLoadLaborCategories = this._laborCatService.getLaborCategoryByGroup(groupId).subscribe(function (laborcats) {
            if (laborcats) {
                _this.data = laborcats;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    LaborCatDashboardPage.prototype.reloadLaborCategories = function (reload) {
        this.showCreateLaborCategory = false;
        this.showEditLaborCategory = false;
        if (reload) {
            this.loadLaborCategories(this.selLCATGroupId);
        }
        else {
            this.selLaborCategory = new _models_laborcat_model__WEBPACK_IMPORTED_MODULE_4__["LaborCategory"]();
        }
    };
    LaborCatDashboardPage.prototype.deleteLaborCategory = function (lcat) {
        var _this = this;
        if (!Object(ramda__WEBPACK_IMPORTED_MODULE_5__["isNil"])(lcat)) {
            this.busyDeleteLaborCategory = this._laborCatService.deleteLaborCategoryById(lcat.id).subscribe(function (data) {
                if (data) {
                    _this.reloadLaborCategories(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    LaborCatDashboardPage.prototype.addLaborCategory = function () {
        this.showCreateLaborCategory = true;
    };
    LaborCatDashboardPage.prototype.selectEditLaborCategory = function (laborcat) {
        this.showEditLaborCategory = true;
        this.selLaborCategory = laborcat;
    };
    LaborCatDashboardPage.prototype.onLCATGroupChanged = function (lcatGroupId) {
        this.selLCATGroupId = lcatGroupId;
        this.reloadLaborCategories(true);
    };
    LaborCatDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    LaborCatDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "laborcat-dashboard",
            template: __webpack_require__(/*! ./laborcat-dashboard.template.html */ "./src/app/admin/components/laborcat/laborcat-dashboard.template.html"),
            providers: [_services_laborcat_service__WEBPACK_IMPORTED_MODULE_2__["LaborCategoryService"], _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_3__["LaborCategoryGroupService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./laborcat-dashboard.styles.scss */ "./src/app/admin/components/laborcat/laborcat-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_laborcat_service__WEBPACK_IMPORTED_MODULE_2__["LaborCategoryService"],
            _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_3__["LaborCategoryGroupService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], LaborCatDashboardPage);
    return LaborCatDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/laborcat/laborcat-dashboard.styles.scss":
/*!**************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/laborcat-dashboard.styles.scss ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.userdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/laborcat/laborcat-dashboard.template.html":
/*!****************************************************************************!*\
  !*** ./src/app/admin/components/laborcat/laborcat-dashboard.template.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">Labor Categories</h1>\r\n<div data-ng-controller=\"laborcatdashboardController\" class=\"laborcatdashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-10\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group row\">\r\n                                <label for=\"tdl-pop\" class=\"col-md-6 form-control-label text-md-right mt10\">\r\n                                    LCAT Groups\r\n                                </label>\r\n                                <div role=\"alert\" class=\"col-md-6 col-xs-12\">\r\n                                    <select required class=\"form-control\" placeholder=\"\" [(ngModel)]=\"selLCATGroupId\"\r\n                                        [ngModelOptions]=\"{standalone: true}\" (change)=\"onLCATGroupChanged($event.target.value)\"\r\n                                        data-parsley-required-message=\"Error: Reference Type is required\">\r\n                                        <option *ngFor=\"let lg of lcatGroups\" [value]=\"lg.groupId\">{{lg.name}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-laborcat\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-laborcat\" title=\"Add Labor Category\"\r\n                                    (click)=\"addLaborCategory()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Add Labor Category\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid-wrapper\">\r\n                        <ag-grid-angular\r\n                            #agGrid\r\n                            style=\"width: 100%; height: 650px;\"\r\n                            class=\"ag-theme-balham\"\r\n                            [rowData]=\"data\"\r\n                            [columnDefs]=\"columnDefs\"\r\n                            [defaultColDef]=\"defaultColDef\"\r\n                            [gridOptions]=\"gridOptions\"\r\n                            [floatingFilter]=\"true\"\r\n                            [pagination]=\"true\"\r\n                            (gridReady)=\"onGridReady($event)\"\r\n                            [paginationAutoPageSize]=\"true\"\r\n                            >\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </div>\r\n                <div class=\"widget-footer\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-xs-12\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary\"\r\n                                    (click)=\"onClickBackButton()\">\r\n                                    <span class=\"glyphicon glyphicon-chevron-left txt-gap\"\r\n                                        aria-hidden=\"true\"></span>Back</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showCreateLaborCategory\" create-laborcat-popup [LCATGroupId]=\"selLCATGroupId\" (reloadLaborCategories)=\"reloadLaborCategories($event)\"></div>\r\n    <div *ngIf=\"showEditLaborCategory\" edit-laborcat-popup [model]=\"selLaborCategory\" (reloadLaborCategories)=\"reloadLaborCategories($event)\"></div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/lcatgroup/create-lcatgroup-popup.component.ts":
/*!********************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/create-lcatgroup-popup.component.ts ***!
  \********************************************************************************/
/*! exports provided: CreateLCATGroupPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateLCATGroupPopup", function() { return CreateLCATGroupPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_lcatgroup_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/lcatgroup.model */ "./src/app/admin/models/lcatgroup.model.ts");
/* harmony import */ var _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/lcatgroup.service */ "./src/app/admin/services/lcatgroup.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Component for creating a labor category
*/




var CreateLCATGroupPopup = /** @class */ (function () {
    function CreateLCATGroupPopup(router, _lcatGroupService) {
        this._lcatGroupService = _lcatGroupService;
        this.reloadLCATGroups = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.lcatGroup = new _models_lcatgroup_model__WEBPACK_IMPORTED_MODULE_2__["LaborCategoryGroup"]();
        this.router = router;
        this.alerts = [
            {
                type: 'warning',
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    CreateLCATGroupPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    CreateLCATGroupPopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
    };
    // Create a new Labor Cat
    CreateLCATGroupPopup.prototype.createLCATGroup = function (lcg) {
        var _this = this;
        jQuery('#addlcatgroupform').parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery('#addlcatgroupform').parsley().isValid()) {
            var that_1 = this;
            this.busy = this._lcatGroupService.saveLaborCategoryGroup(lcg).subscribe(function (data) {
                if (data) {
                    that_1.reset(true);
                    that_1.reloadLCATGroups.emit(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    CreateLCATGroupPopup.prototype.reset = function (flag) {
        jQuery('#create-lcatgroup').on('hidden').find('#code').val('');
        jQuery('#create-lcatgroup').on('hidden').find('#description').val('');
        jQuery('#addlcatgroupform').parsley().reset();
        jQuery('#create-lcatgroup').modal('hide');
        this.showErrorFlag = false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateLCATGroupPopup.prototype, "reloadLCATGroups", void 0);
    CreateLCATGroupPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: '[create-lcatgroup-popup]',
            template: __webpack_require__(/*! ./create-lcatgroup-popup.template.html */ "./src/app/admin/components/lcatgroup/create-lcatgroup-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./create-lcatgroup-popup.styles.scss */ "./src/app/admin/components/lcatgroup/create-lcatgroup-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateLaborCatPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_3__["LaborCategoryGroupService"]])
    ], CreateLCATGroupPopup);
    return CreateLCATGroupPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/lcatgroup/create-lcatgroup-popup.styles.scss":
/*!*******************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/create-lcatgroup-popup.styles.scss ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/lcatgroup/create-lcatgroup-popup.template.html":
/*!*********************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/create-lcatgroup-popup.template.html ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-lcatgroup\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-lcatgroup-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-lcatgroup-title\">Add LCAT Group</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"addlcatgroupform\" #addlcatgroupform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"code\" class=\"col-md-2 form-control-label text-md-right\">Group Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"code\" [(ngModel)]=\"lcatGroup.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Code is required\" >\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"lcatGroup.enabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createLCATGroup(lcatGroup)\">Save LCAT Group</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.component.ts ***!
  \******************************************************************************/
/*! exports provided: EditLCATGroupPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditLCATGroupPopup", function() { return EditLCATGroupPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/lcatgroup.service */ "./src/app/admin/services/lcatgroup.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Componentfor adding contact as a popup.
*/



var EditLCATGroupPopup = /** @class */ (function () {
    function EditLCATGroupPopup(router, _lcatGroupService) {
        this._lcatGroupService = _lcatGroupService;
        this.reloadLCATGroups = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    EditLCATGroupPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    EditLCATGroupPopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
    };
    // Update labor cat
    EditLCATGroupPopup.prototype.updateLCATGroup = function (lcg) {
        var _this = this;
        jQuery("#editlcatgroupform").parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#editlcatgroupform").parsley().isValid()) {
            this.busy = this._lcatGroupService.saveLaborCategoryGroup(lcg).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    EditLCATGroupPopup.prototype.reset = function (flag) {
        jQuery("#edit-lcatgroup").on("hidden").find("#code").val("");
        jQuery("#edit-lcatgroup").on("hidden").find("#description").val("");
        jQuery("#editlcatgroupform").parsley().reset();
        jQuery("#edit-lcatgroup").modal("hide");
        this.reloadLCATGroups.emit(flag);
        this.showErrorFlag = false;
    };
    EditLCATGroupPopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editLCATGroup = Object.assign({}, chg.currentValue);
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], EditLCATGroupPopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditLCATGroupPopup.prototype, "reloadLCATGroups", void 0);
    EditLCATGroupPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-lcatgroup-popup]",
            template: __webpack_require__(/*! ./edit-lcatgroup-popup.template.html */ "./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./edit-lcatgroup-popup.styles.scss */ "./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditLaborCatPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_2__["LaborCategoryGroupService"]])
    ], EditLCATGroupPopup);
    return EditLCATGroupPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.styles.scss":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.styles.scss ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.template.html":
/*!*******************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/edit-lcatgroup-popup.template.html ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-lcatgroup\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-lcatgroup-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-lcatgroup-title\">Edit LCAT Group</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"editlcatgroupform\" #editlcatgroupform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t\t<label for=\"lcg-name\" class=\"col-md-2 form-control-label text-md-right\">Group Name\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"lcg-name\" [(ngModel)]=\"editLCATGroup.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Group Name is required\" >\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"editLCATGroup.enabled\"\r\n\t\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateLCATGroup(editLCATGroup)\">Save LCAT Group</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/lcatgroup/lcatgroup-dashboard.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/lcatgroup-dashboard.component.ts ***!
  \*****************************************************************************/
/*! exports provided: EditLCATGroupComponent, DeleteLCATGroupComponent, LCATGroupDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditLCATGroupComponent", function() { return EditLCATGroupComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteLCATGroupComponent", function() { return DeleteLCATGroupComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LCATGroupDashboardPage", function() { return LCATGroupDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_lcatgroup_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/lcatgroup.model */ "./src/app/admin/models/lcatgroup.model.ts");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
/* harmony import */ var _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/lcatgroup.service */ "./src/app/admin/services/lcatgroup.service.ts");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var EditLCATGroupComponent = /** @class */ (function () {
    function EditLCATGroupComponent() {
    }
    EditLCATGroupComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditLCATGroupComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditLCATGroup(this.params.data);
    };
    EditLCATGroupComponent.prototype.refresh = function () {
        return false;
    };
    EditLCATGroupComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Edit LCAT Group\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-lcatgroup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], EditLCATGroupComponent);
    return EditLCATGroupComponent;
}());

var DeleteLCATGroupComponent = /** @class */ (function () {
    function DeleteLCATGroupComponent() {
    }
    DeleteLCATGroupComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteLCATGroupComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.deleteLaborCategory(this.params.data);
    };
    DeleteLCATGroupComponent.prototype.refresh = function () {
        return false;
    };
    DeleteLCATGroupComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Delete LCAT Group\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], DeleteLCATGroupComponent);
    return DeleteLCATGroupComponent;
}());

// con
var LCATGroupDashboardPage = /** @class */ (function () {
    function LCATGroupDashboardPage(_lcatGroupService, router) {
        this._lcatGroupService = _lcatGroupService;
        this.dropdownData = [];
        this.delLCATGroupTitle = "Delete LCAT Group";
        this.delLCATGroupMessage = "Are you sure you want to delete LCAT Group?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditLCATGroupComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'Name',
                field: 'name'
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteLCATGroupComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
        this.showCreateLCATGroup = false;
        this.showEditLCATGroup = false;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    LCATGroupDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        this.loadLCATGroups();
    };
    LCATGroupDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyDeleteLCATGroup) {
            this.busyDeleteLCATGroup.unsubscribe();
        }
        if (this.busyLoadLCATGroups) {
            this.busyLoadLCATGroups.unsubscribe();
        }
        if (this.busyLoadLaborCategories) {
            this.busyLoadLaborCategories.unsubscribe();
        }
    };
    LCATGroupDashboardPage.prototype.ngAfterViewInit = function () {
    };
    LCATGroupDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    LCATGroupDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    LCATGroupDashboardPage.prototype.loadLCATGroups = function () {
        var _this = this;
        var that = this;
        this.busyLoadLCATGroups = this._lcatGroupService.getAll().subscribe(function (lcg) {
            if (lcg) {
                that.data = lcg;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    LCATGroupDashboardPage.prototype.deleteLCATGroup = function (lcg) {
        var _this = this;
        if (!Object(ramda__WEBPACK_IMPORTED_MODULE_5__["isNil"])(lcg)) {
            this.busyDeleteLCATGroup = this._lcatGroupService.deleteLCATGroupById(lcg.groupId).subscribe(function (data) {
                if (data) {
                    _this.loadLCATGroups();
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    LCATGroupDashboardPage.prototype.addLCATGroup = function () {
        this.showCreateLCATGroup = true;
    };
    LCATGroupDashboardPage.prototype.selectEditLCATGroup = function (lcg) {
        this.showEditLCATGroup = true;
        this.selLCATGroup = lcg;
    };
    LCATGroupDashboardPage.prototype.reloadLCATGroups = function (reload) {
        this.showEditLCATGroup = false;
        this.showCreateLCATGroup = false;
        if (reload) {
            this.loadLCATGroups();
        }
        else {
            this.selLCATGroup = new _models_lcatgroup_model__WEBPACK_IMPORTED_MODULE_2__["LaborCategoryGroup"]();
        }
    };
    LCATGroupDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    LCATGroupDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "lcatgroup-dashboard",
            template: __webpack_require__(/*! ./lcatgroup-dashboard.template.html */ "./src/app/admin/components/lcatgroup/lcatgroup-dashboard.template.html"),
            providers: [_services_laborcat_service__WEBPACK_IMPORTED_MODULE_3__["LaborCategoryService"], _services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_4__["LaborCategoryGroupService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./lcatgroup-dashboard.styles.scss */ "./src/app/admin/components/lcatgroup/lcatgroup-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_lcatgroup_service__WEBPACK_IMPORTED_MODULE_4__["LaborCategoryGroupService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], LCATGroupDashboardPage);
    return LCATGroupDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/lcatgroup/lcatgroup-dashboard.styles.scss":
/*!****************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/lcatgroup-dashboard.styles.scss ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.lcatgroupdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/lcatgroup/lcatgroup-dashboard.template.html":
/*!******************************************************************************!*\
  !*** ./src/app/admin/components/lcatgroup/lcatgroup-dashboard.template.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">LCAT Groups</h1>\r\n<div data-ng-controller=\"lcatgroupdashboardController\" class=\"lcatgroupdashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-10\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-laborcat\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-lcatgroup\" title=\"Add LCAT Group\"\r\n                                    (click)=\"addLCATGroup()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Add LCAT Group\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid-wrapper\">\r\n                        <ag-grid-angular\r\n                            #agGrid\r\n                            style=\"width: 100%; height: 650px;\"\r\n                            class=\"ag-theme-balham\"\r\n                            [rowData]=\"data\"\r\n                            [columnDefs]=\"columnDefs\"\r\n                            [defaultColDef]=\"defaultColDef\"\r\n                            [gridOptions]=\"gridOptions\"\r\n                            [floatingFilter]=\"true\"\r\n                            [pagination]=\"true\"\r\n                            (gridReady)=\"onGridReady($event)\"\r\n                            [paginationAutoPageSize]=\"true\"\r\n                            >\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </div>\r\n                <div class=\"widget-footer\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-xs-12\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary\"\r\n                                    (click)=\"onClickBackButton()\">\r\n                                    <span class=\"glyphicon glyphicon-chevron-left txt-gap\"\r\n                                        aria-hidden=\"true\"></span>Back</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showCreateLCATGroup\" create-lcatgroup-popup (reloadLCATGroups)=\"reloadLCATGroups($event)\"></div>\r\n    <div *ngIf=\"showEditLCATGroup\" edit-lcatgroup-popup [model]=\"selLCATGroup\" (reloadLCATGroups)=\"reloadLCATGroups($event)\"></div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/lookup/create-lookup-popup.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/admin/components/lookup/create-lookup-popup.component.ts ***!
  \**************************************************************************/
/*! exports provided: CreateLookupPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateLookupPopup", function() { return CreateLookupPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
/* harmony import */ var _models_lookup_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/lookup.model */ "./src/app/admin/models/lookup.model.ts");
/* harmony import */ var _services_lookup_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/lookup.service */ "./src/app/admin/services/lookup.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var CreateLookupPopup = /** @class */ (function () {
    function CreateLookupPopup(router, lookupService) {
        this.lookupService = lookupService;
        this.reloadLookups = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.lookup = new _models_lookup_model__WEBPACK_IMPORTED_MODULE_3__["Lookup"]();
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    CreateLookupPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    CreateLookupPopup.prototype.ngOnDestroy = function () {
        if (this.busyCreateLookup) {
            this.busyCreateLookup.unsubscribe();
        }
    };
    CreateLookupPopup.prototype.createLookup = function (lv) {
        var _this = this;
        jQuery("#addlookupform")
            .parsley()
            .validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#addlookupform")
            .parsley()
            .isValid()) {
            this.lookup.refTypeId = this.ReferTypeId;
            this.lookup.refCode = Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(lv.refCode) ? "" : lv.refCode.toUpperCase();
            this.lookup.refValue = lv.refValue;
            this.busyCreateLookup = this.lookupService.createLookup(this.lookup).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                    _this.reloadLookups.emit(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    CreateLookupPopup.prototype.reset = function (flag) {
        jQuery("#create-lookup")
            .on("hidden")
            .find("#ref-code")
            .val("");
        jQuery("#create-lookup")
            .on("hidden")
            .find("#ref-val")
            .val("");
        jQuery("#addlookupform")
            .parsley()
            .reset();
        jQuery("#create-lookup").modal("hide");
        this.showErrorFlag = false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], CreateLookupPopup.prototype, "ReferTypeId", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateLookupPopup.prototype, "reloadLookups", void 0);
    CreateLookupPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[create-lookup-popup]",
            template: __webpack_require__(/*! ./create-lookup-popup.template.html */ "./src/app/admin/components/lookup/create-lookup-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [],
            styles: [__webpack_require__(/*! ./create-lookup-popup.styles.scss */ "./src/app/admin/components/lookup/create-lookup-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateResourcePopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_lookup_service__WEBPACK_IMPORTED_MODULE_4__["LookupService"]])
    ], CreateLookupPopup);
    return CreateLookupPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/lookup/create-lookup-popup.styles.scss":
/*!*************************************************************************!*\
  !*** ./src/app/admin/components/lookup/create-lookup-popup.styles.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/lookup/create-lookup-popup.template.html":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/lookup/create-lookup-popup.template.html ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-lookup\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-lookup-title\"\r\n aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-lookup-title\">Add Lookup</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"addlookupform\" #addlookupform=\"ngForm\" role=\"form\" class=\"form-horizontal\"\r\n\t\t\t\t data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\" data-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"ref-code\" class=\"col-md-3 form-control-label text-md-right\">Code\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"ref-code\" [(ngModel)]=\"lookup.refCode\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t required maxlength=\"4\" data-parsley-maxlength=\"4\" data-parsley-required-message=\"Error: Code is required\"\r\n\t\t\t\t\t\t\t placeholder=\"Max 4 characters\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Description-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"ref-val\" class=\"col-md-3 form-control-label text-md-right\">Description\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"ref-val\" [(ngModel)]=\"lookup.refValue\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Description is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createLookup(lookup)\">Save Lookup</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/lookup/edit-lookup-popup.component.ts":
/*!************************************************************************!*\
  !*** ./src/app/admin/components/lookup/edit-lookup-popup.component.ts ***!
  \************************************************************************/
/*! exports provided: EditLookupPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditLookupPopup", function() { return EditLookupPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
/* harmony import */ var _models_lookup_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/lookup.model */ "./src/app/admin/models/lookup.model.ts");
/* harmony import */ var _services_lookup_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/lookup.service */ "./src/app/admin/services/lookup.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var EditLookupPopup = /** @class */ (function () {
    function EditLookupPopup(router, lookupService) {
        this.lookupService = lookupService;
        this.reloadLookups = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.editLookup = new _models_lookup_model__WEBPACK_IMPORTED_MODULE_3__["Lookup"]();
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
    }
    EditLookupPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    EditLookupPopup.prototype.ngOnDestroy = function () {
        if (this.busyEditLookup) {
            this.busyEditLookup.unsubscribe();
        }
    };
    // Update lookup
    EditLookupPopup.prototype.updateLookup = function (lv) {
        var _this = this;
        jQuery("#editlookupform")
            .parsley()
            .validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#editlookupform")
            .parsley()
            .isValid()) {
            this.editLookup.refCode = Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(lv.refCode) ? "" : lv.refCode.toUpperCase();
            this.editLookup.refValue = lv.refValue;
            this.busyEditLookup = this.lookupService.updateLookup(this.editLookup).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                if (!Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(error) && error.indexOf("USER_EMAIL_UK") > -1) {
                    error = "Lookup already exists";
                }
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({
                    type: "warning",
                    msg: Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(error) ? "Error: unable to save resource" : error
                });
            });
        }
    };
    EditLookupPopup.prototype.reset = function (flag) {
        jQuery("#edit-lookup")
            .on("hidden")
            .find("#ref-code")
            .val("");
        jQuery("#edit-lookup")
            .on("hidden")
            .find("#ref-val")
            .val("");
        jQuery("#editlookupform")
            .parsley()
            .reset();
        jQuery("#edit-lookup").modal("hide");
        this.reloadLookups.emit(flag);
        this.showErrorFlag = false;
    };
    EditLookupPopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editLookup = Object.assign({}, chg.currentValue);
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_lookup_model__WEBPACK_IMPORTED_MODULE_3__["Lookup"])
    ], EditLookupPopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditLookupPopup.prototype, "reloadLookups", void 0);
    EditLookupPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-lookup-popup]",
            template: __webpack_require__(/*! ./edit-lookup-popup.template.html */ "./src/app/admin/components/lookup/edit-lookup-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [],
            styles: [__webpack_require__(/*! ./edit-lookup-popup.styles.scss */ "./src/app/admin/components/lookup/edit-lookup-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditLookupPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_lookup_service__WEBPACK_IMPORTED_MODULE_4__["LookupService"]])
    ], EditLookupPopup);
    return EditLookupPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/lookup/edit-lookup-popup.styles.scss":
/*!***********************************************************************!*\
  !*** ./src/app/admin/components/lookup/edit-lookup-popup.styles.scss ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/lookup/edit-lookup-popup.template.html":
/*!*************************************************************************!*\
  !*** ./src/app/admin/components/lookup/edit-lookup-popup.template.html ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-lookup\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-lookup-title\"\r\n aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-lookup-title\">Edit Lookup</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"editlookupform\" #editlookupform=\"ngForm\" role=\"form\" class=\"form-horizontal\"\r\n\t\t\t\t data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\" data-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"ref-code\" class=\"col-md-3 form-control-label text-md-right\">Code\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"ref-code\" [(ngModel)]=\"editLookup.refCode\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t required maxlength=\"4\" data-parsley-maxlength=\"4\" data-parsley-required-message=\"Error: Code is required\"\r\n\t\t\t\t\t\t\t placeholder=\"Max 4 characters\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Description-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"ref-val\" class=\"col-md-3 form-control-label text-md-right\">Description\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"ref-val\" [(ngModel)]=\"editLookup.refValue\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Description is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateLookup(editLookup)\">Save Lookup</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/lookup/lookup-dashboard.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/admin/components/lookup/lookup-dashboard.component.ts ***!
  \***********************************************************************/
/*! exports provided: EditLookupComponent, DeleteLookupComponent, LookupDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditLookupComponent", function() { return EditLookupComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteLookupComponent", function() { return DeleteLookupComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LookupDashboardPage", function() { return LookupDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_lookup_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/lookup.model */ "./src/app/admin/models/lookup.model.ts");
/* harmony import */ var _services_lookup_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/lookup.service */ "./src/app/admin/services/lookup.service.ts");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var EditLookupComponent = /** @class */ (function () {
    function EditLookupComponent() {
    }
    EditLookupComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditLookupComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditLookup(this.params.data);
    };
    EditLookupComponent.prototype.refresh = function () {
        return false;
    };
    EditLookupComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Edit Lookup\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-lookup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], EditLookupComponent);
    return EditLookupComponent;
}());

var DeleteLookupComponent = /** @class */ (function () {
    function DeleteLookupComponent() {
    }
    DeleteLookupComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteLookupComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.deleteLookup(this.params.data);
    };
    DeleteLookupComponent.prototype.refresh = function () {
        return false;
    };
    DeleteLookupComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\"  title=\"Delete Lookup\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], DeleteLookupComponent);
    return DeleteLookupComponent;
}());

var LookupDashboardPage = /** @class */ (function () {
    function LookupDashboardPage(lookupService, router) {
        this.lookupService = lookupService;
        this.dropdownData = [];
        this.dellookuptitle = "Delete Lookup";
        this.dellookupmessage = "Are you sure you want to delete lookup?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditLookupComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'Code',
                field: 'refCode',
            },
            {
                headerName: 'Value',
                field: 'refValue'
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteLookupComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text"></span>'
            }
        ];
        this.router = router;
        this.showCreateLookup = false;
        this.showEditLookup = false;
        this.selRefTypeId = 1;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    LookupDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        this.loadReferenceTypes();
    };
    LookupDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadLookups) {
            this.busyLoadLookups.unsubscribe();
        }
        if (this.busyDeleteLookup) {
            this.busyDeleteLookup.unsubscribe();
        }
        if (this.busyLoadRefereneTypes) {
            this.busyLoadRefereneTypes.unsubscribe();
        }
    };
    LookupDashboardPage.prototype.ngAfterViewInit = function () {
    };
    LookupDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    LookupDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    LookupDashboardPage.prototype.loadReferenceTypes = function () {
        var that = this;
        this.busyLoadRefereneTypes = this.lookupService.getAllRefTypes().subscribe(function (rt) {
            if (rt) {
                that.refTypes = rt;
                if (Object(ramda__WEBPACK_IMPORTED_MODULE_4__["isNil"])(that.refTypes)) {
                    that.selRefTypeId = rt[0].referenceTypeId;
                }
                that.loadLookups(that.selRefTypeId);
            }
        }, function (error) {
            that.showErrorFlag = true;
            that.alerts = [];
            that.alerts.push({ type: 'warning', msg: error });
        });
    };
    LookupDashboardPage.prototype.loadLookups = function (rtid) {
        var that = this;
        this.busyLoadLookups = this.lookupService.getAllByRefTypeId(rtid).subscribe(function (lv) {
            if (lv) {
                that.data = lv;
            }
        }, function (error) {
            that.showErrorFlag = true;
            that.alerts = [];
            that.alerts.push({ type: 'warning', msg: error });
        });
    };
    LookupDashboardPage.prototype.reloadLookups = function (reload) {
        this.showCreateLookup = false;
        this.showEditLookup = false;
        if (reload) {
            this.loadLookups(this.selRefTypeId);
        }
        else {
            this.selLookup = new _models_lookup_model__WEBPACK_IMPORTED_MODULE_2__["Lookup"]();
        }
    };
    LookupDashboardPage.prototype.deleteLookup = function (lookup) {
        var _this = this;
        if (!Object(ramda__WEBPACK_IMPORTED_MODULE_4__["isNil"])(lookup)) {
            this.busyDeleteLookup = this.lookupService.deleteLookupById(lookup.lookupId).subscribe(function (data) {
                if (data) {
                    _this.reloadLookups(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    LookupDashboardPage.prototype.addLookup = function () {
        this.showCreateLookup = true;
    };
    LookupDashboardPage.prototype.selectEditLookup = function (lookupValue) {
        this.showEditLookup = true;
        this.selLookup = lookupValue;
    };
    LookupDashboardPage.prototype.onReferenceTypeChanged = function (newRefTypeId) {
        this.selRefTypeId = newRefTypeId;
        this.reloadLookups(true);
    };
    LookupDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    LookupDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "lookup-dashboard",
            template: __webpack_require__(/*! ./lookup-dashboard.template.html */ "./src/app/admin/components/lookup/lookup-dashboard.template.html"),
            providers: [_services_lookup_service__WEBPACK_IMPORTED_MODULE_3__["LookupService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./lookup-dashboard.styles.scss */ "./src/app/admin/components/lookup/lookup-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_lookup_service__WEBPACK_IMPORTED_MODULE_3__["LookupService"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], LookupDashboardPage);
    return LookupDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/lookup/lookup-dashboard.styles.scss":
/*!**********************************************************************!*\
  !*** ./src/app/admin/components/lookup/lookup-dashboard.styles.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.lookupdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/lookup/lookup-dashboard.template.html":
/*!************************************************************************!*\
  !*** ./src/app/admin/components/lookup/lookup-dashboard.template.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">Lookups</h1>\r\n<div data-ng-controller=\"lookupdashboardController\" class=\"lookupdashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                            <div class=\"form-group row\">\r\n                                <label for=\"tdl-pop\" class=\"col-md-6 form-control-label text-md-right mt10\">\r\n                                    Reference Type\r\n                                </label>\r\n                                <div role=\"alert\" class=\"col-md-6 col-xs-12\">\r\n                                    <select required class=\"form-control\" placeholder=\"\" [(ngModel)]=\"selRefTypeId\"\r\n                                        [ngModelOptions]=\"{standalone: true}\" (change)=\"onReferenceTypeChanged($event.target.value)\"\r\n                                        data-parsley-required-message=\"Error: Reference Type is required\">\r\n                                        <option *ngFor=\"let rt of refTypes\" [value]=\"rt.referenceTypeId\">{{rt.description}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-lookup\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-lookup\" title=\"Add Lookup\"\r\n                                    (click)=\"addLookup()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Add Lookup\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid-wrapper\">\r\n                        <ag-grid-angular\r\n                            #agGrid\r\n                            style=\"width: 100%; height: 650px;\"\r\n                            class=\"ag-theme-balham\"\r\n                            [rowData]=\"data\"\r\n                            [columnDefs]=\"columnDefs\"\r\n                            [defaultColDef]=\"defaultColDef\"\r\n                            [gridOptions]=\"gridOptions\"\r\n                            [floatingFilter]=\"true\"\r\n                            [pagination]=\"true\"\r\n                            (gridReady)=\"onGridReady($event)\"\r\n                            [paginationAutoPageSize]=\"true\"\r\n                            >\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </div>\r\n                <div class=\"widget-footer\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-xs-12\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary\"\r\n                                    (click)=\"onClickBackButton()\">\r\n                                    <span class=\"glyphicon glyphicon-chevron-left txt-gap\"\r\n                                        aria-hidden=\"true\"></span>Back</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showCreateLookup\" create-lookup-popup [ReferTypeId]=\"selRefTypeId\" (reloadLookups)=\"reloadLookups($event)\"></div>\r\n    <div *ngIf=\"showEditLookup\" edit-lookup-popup [model]=\"selLookup\" (reloadLookups)=\"reloadLookups($event)\"></div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/resources/create-resource-popup.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/admin/components/resources/create-resource-popup.component.ts ***!
  \*******************************************************************************/
/*! exports provided: CreateResourcePopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateResourcePopup", function() { return CreateResourcePopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
/* harmony import */ var _tdl_models_resource_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../tdl/models/resource.model */ "./src/app/tdl/models/resource.model.ts");
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/admin.service */ "./src/app/admin/services/admin.service.ts");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
/* harmony import */ var _tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../tdl/services/resource.service */ "./src/app/tdl/services/resource.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Component for creating user
*/







var CreateResourcePopup = /** @class */ (function () {
    function CreateResourcePopup(router, _adminService, resourceService, laborcatService) {
        this._adminService = _adminService;
        this.resourceService = resourceService;
        this.laborcatService = laborcatService;
        this.reloadResources = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.resource = new _tdl_models_resource_model__WEBPACK_IMPORTED_MODULE_3__["Resource"]();
        this.laborCategories = [];
        this.resourceTypes = [];
        this.resourceTeams = [];
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.userenabled = true;
        this.showLaborCategories();
        this.showResourceTypes();
        this.showResourceTeams();
    }
    CreateResourcePopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
        this.loadResources();
    };
    CreateResourcePopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
        if (this.busylcat) {
            this.busylcat.unsubscribe();
        }
        if (this.busyrtype) {
            this.busyrtype.unsubscribe();
        }
        if (this.busyrteam) {
            this.busyrteam.unsubscribe();
        }
        if (this.busyLoadResources) {
            this.busyLoadResources.unsubscribe();
        }
    };
    CreateResourcePopup.prototype.loadResources = function () {
        var _this = this;
        this.busyLoadResources = this.resourceService
            .getAllActiveResources()
            .subscribe(function (data) {
            if (data) {
                _this.listResources = data;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    // Create a new resource
    CreateResourcePopup.prototype.createResource = function (resource) {
        var _this = this;
        jQuery("#addresourceform")
            .parsley()
            .validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#addresourceform")
            .parsley()
            .isValid()) {
            resource.active = this.userenabled === true ? "Y" : "N";
            resource.placeholder = this.placeholder === true ? "Y" : "N";
            resource.displayName = resource.name;
            resource.lookupName = resource.name;
            // Default to first item on the the list.
            if (!Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(this.laborCategories) && Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(resource.lcatCode)) {
                if (this.laborCategories.length > 0) {
                    resource.lcatCode = this.laborCategories[0].code;
                }
            }
            this.busy = this._adminService.createResource(resource).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                    _this.reloadResources.emit(true);
                }
            }, function (error) {
                if (error.indexOf("USER_EMAIL_UK") > -1) {
                    error = "Resource already exists";
                }
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    CreateResourcePopup.prototype.reset = function (flag) {
        jQuery("#create-resource")
            .on("hidden")
            .find("#first-name")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#last-name")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#email-address")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#password")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#phone-number")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#res-type")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#res-team")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find("#maxhours")
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find('input[type="email"]')
            .val("");
        jQuery("#create-resource")
            .on("hidden")
            .find('input[type="checkbox"]')
            .prop("checked", false);
        jQuery("#addresourceform")
            .parsley()
            .reset();
        jQuery("#create-resource").modal("hide");
        this.showErrorFlag = false;
    };
    CreateResourcePopup.prototype.showLaborCategories = function () {
        var that = this;
        this.busylcat = this.laborcatService.getAllActive().subscribe(function (data) {
            that.laborCategories = data;
        }, function (error) {
            that.showErrorFlag = true;
            that.alerts = [];
            that.alerts.push({ type: "warning", msg: error });
        });
    };
    CreateResourcePopup.prototype.showResourceTypes = function () {
        var _this = this;
        this.busyrtype = this._adminService.getResourceTypes().subscribe(function (data) {
            _this.resourceTypes = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    CreateResourcePopup.prototype.showResourceTeams = function () {
        var _this = this;
        this.busyrteam = this._adminService.getResourceTeams().subscribe(function (data) {
            _this.resourceTeams = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateResourcePopup.prototype, "reloadResources", void 0);
    CreateResourcePopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[create-resource-popup]",
            template: __webpack_require__(/*! ./create-resource-popup.template.html */ "./src/app/admin/components/resources/create-resource-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [_services_laborcat_service__WEBPACK_IMPORTED_MODULE_5__["LaborCategoryService"]],
            styles: [__webpack_require__(/*! ./create-resource-popup.styles.scss */ "./src/app/admin/components/resources/create-resource-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateResourcePopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_admin_service__WEBPACK_IMPORTED_MODULE_4__["AdminService"],
            _tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_6__["ResourceService"],
            _services_laborcat_service__WEBPACK_IMPORTED_MODULE_5__["LaborCategoryService"]])
    ], CreateResourcePopup);
    return CreateResourcePopup;
}());



/***/ }),

/***/ "./src/app/admin/components/resources/create-resource-popup.styles.scss":
/*!******************************************************************************!*\
  !*** ./src/app/admin/components/resources/create-resource-popup.styles.scss ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/resources/create-resource-popup.template.html":
/*!********************************************************************************!*\
  !*** ./src/app/admin/components/resources/create-resource-popup.template.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-resource\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-resource-title\"\r\n aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-resource-title\">Add Resource</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"addresourceform\" #addresourceform=\"ngForm\" role=\"form\" class=\"form-horizontal\"\r\n\t\t\t\t data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\" data-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"name\" class=\"col-md-3 form-control-label text-md-right\">Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"resource.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\tplacehoder=\"Lastname, Firstname\"\r\n\t\t\t\t\t\t\t required data-parsley-required-message=\"Error: Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Lookup Name-->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"lookup-name\" class=\"col-md-2 form-control-label text-md-right\">Lookup Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"lookup-name\" [(ngModel)]=\"resource.lookupName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-required-message=\"Error: Lookup Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Display Name-->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"display-name\" class=\"col-md-2 form-control-label text-md-right\">Display Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"display-name\" [(ngModel)]=\"resource.displayName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Display Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\t\t\t\t -->\r\n\t\t\t\t\t<!-- Labor Category -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"user-roles\" class=\"col-md-3 form-control-label text-md-right\">Labor Category\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"resource.lcatCode\" name=\"laborCategories\" class=\"form-control fdatable\" id=\"res-lcat\"\r\n\t\t\t\t\t\t\t required data-parsley-required-message=\"Error: Labor Category is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let lcat of laborCategories\" [value]=\"lcat.code\">\r\n\t\t\t\t\t\t\t\t\t{{lcat.description}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- Resource Type -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"res-type\" class=\"col-md-3 form-control-label text-md-right\">Resource Type\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"resource.typeCode\" name=\"restype\" class=\"form-control fdatable\" id=\"res-type\" required\r\n\t\t\t\t\t\t\t data-parsley-required-message=\"Error: Resource Type is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let rtype of resourceTypes\" [value]=\"rtype.code\">\r\n\t\t\t\t\t\t\t\t\t{{rtype.value}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Team Name -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"res-team\" class=\"col-md-3 form-control-label text-md-right\">Team\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"resource.teamCode\" name=\"resteam\" class=\"form-control fdatable\" id=\"res-team\" required\r\n\t\t\t\t\t\t\t data-parsley-required-message=\"Error: Resource Team is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let rteam of resourceTeams\" [value]=\"rteam.code\">\r\n\t\t\t\t\t\t\t\t\t{{rteam.value}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- Team Lead -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<label for=\"res-lead\" class=\"col-md-4 form-control-label text-md-right\">\r\n\t\t\t\t\t\t\tTeam Lead\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"resource.leadID\" title=\"Team Lead\" name=\"Team Lead\" class=\"form-control fdatable\" id=\"res-lead\"\r\n\t\t\t\t\t\t\t placeholder=\"Select Team Lead\">\r\n\t\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let res of listResources\" [ngValue]=\"res.resourceID\">{{res.name}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Email Address         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"email-address\" class=\"col-md-3 form-control-label text-md-right\">Email\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"email-address\" [(ngModel)]=\"resource.email\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t required data-parsley-error-message=\"Error: User ID is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Phone         -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"phone\" class=\"col-md-2 form-control-label text-md-right\">Phone\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"phone\" class=\"form-control\" id=\"password\" [(ngModel)]=\"resource.phone\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-error-message=\"Error: Phone is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Employee ID         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"employeeid\" class=\"col-md-3 form-control-label text-md-right\">Employee ID\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"employeeid\" [(ngModel)]=\"resource.employeeID\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t required data-parsley-error-message=\"Error: Employee ID is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Rate         -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t\t<label for=\"rate\" class=\"col-md-3 form-control-label text-md-right\">Rate\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"rate\" [(ngModel)]=\"resource.rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\trequired data-parsley-error-message=\"Error: Rate is required\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\t -->\r\n\t\t\t\t\t<!--Max Hours         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"maxhours\" class=\"col-md-3 form-control-label text-md-right\">Max Hours\r\n\t\t\t\t\t\t\t<span class=\"help-block\"></span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"maxhours\" [(ngModel)]=\"resource.maxHours\" [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"userenabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Placeholder         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"placeholder\" class=\"col-md-3 form-control-label text-md-right\">Placeholder\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"placeholder\" [(ngModel)]=\"placeholder\"\r\n\t\t\t\t\t\t\t\t[ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createResource(resource)\">Save Resource</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/resources/edit-resource-popup.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/resources/edit-resource-popup.component.ts ***!
  \*****************************************************************************/
/*! exports provided: EditResourcePopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditResourcePopup", function() { return EditResourcePopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
/* harmony import */ var _tdl_models_resource_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../tdl/models/resource.model */ "./src/app/tdl/models/resource.model.ts");
/* harmony import */ var _tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../tdl/services/resource.service */ "./src/app/tdl/services/resource.service.ts");
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/admin.service */ "./src/app/admin/services/admin.service.ts");
/* harmony import */ var _services_laborcat_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/laborcat.service */ "./src/app/admin/services/laborcat.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var EditResourcePopup = /** @class */ (function () {
    function EditResourcePopup(router, _adminService, resourceService, laborCatService) {
        this._adminService = _adminService;
        this.resourceService = resourceService;
        this.laborCatService = laborCatService;
        this.reloadResources = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.editResource = new _tdl_models_resource_model__WEBPACK_IMPORTED_MODULE_3__["Resource"]();
        this.laborCategories = [];
        this.resourceTypes = [];
        this.resourceTeams = [];
        this.positionNames = [];
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.showLaborCategories();
        this.showResourceTypes();
        this.showResourceTeams();
        this.showPositionNames();
    }
    EditResourcePopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
        this.loadResources();
    };
    EditResourcePopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
        if (this.busylcat) {
            this.busylcat.unsubscribe();
        }
        if (this.busyrtype) {
            this.busyrtype.unsubscribe();
        }
        if (this.busyrteam) {
            this.busyrteam.unsubscribe();
        }
        if (this.busyLoadResources) {
            this.busyLoadResources.unsubscribe();
        }
        if (this.busyLoadPositions) {
            this.busyLoadPositions.unsubscribe();
        }
    };
    EditResourcePopup.prototype.loadResources = function () {
        var _this = this;
        this.busyLoadResources = this.resourceService
            .getAllActiveResources()
            .subscribe(function (data) {
            if (data) {
                _this.listResources = data;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    // Update resource
    EditResourcePopup.prototype.updateResource = function (resource) {
        var _this = this;
        jQuery("#editresourceform")
            .parsley()
            .validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#editresourceform")
            .parsley()
            .isValid()) {
            resource.displayName = resource.name;
            resource.lookupName = resource.name;
            resource.active = this.userenabled === true ? "Y" : "N";
            resource.placeholder = this.placeholder === true ? "Y" : "N";
            resource.cdm = this.cdm === true ? "Y" : "N";
            this.busy = this._adminService.updateResource(resource).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                if (!Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(error) && error.indexOf("USER_EMAIL_UK") > -1) {
                    error = "Resource already exists";
                }
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({
                    type: "warning",
                    msg: Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(error) ? "Error: unable to save resource" : error
                });
            });
        }
    };
    EditResourcePopup.prototype.reset = function (flag) {
        jQuery("#edit-resource")
            .on("hidden")
            .find("#first-name")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#last-name")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#email-address")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#password")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#phone-number")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#res-type")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#res-team")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find('input[type="email"]')
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find("#maxhours")
            .val("");
        jQuery("#edit-resource")
            .on("hidden")
            .find('input[type="checkbox"]')
            .prop("checked", false);
        jQuery("#editresourceform")
            .parsley()
            .reset();
        jQuery("#edit-resource").modal("hide");
        this.reloadResources.emit(flag);
        this.showErrorFlag = false;
    };
    EditResourcePopup.prototype.showLaborCategories = function () {
        var _this = this;
        this.busylcat = this.laborCatService.getAllActive().subscribe(function (data) {
            _this.laborCategories = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    EditResourcePopup.prototype.showResourceTypes = function () {
        var _this = this;
        this.busyrtype = this._adminService.getResourceTypes().subscribe(function (data) {
            _this.resourceTypes = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    EditResourcePopup.prototype.showResourceTeams = function () {
        var _this = this;
        this.busyrteam = this._adminService.getResourceTeams().subscribe(function (data) {
            _this.resourceTeams = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    EditResourcePopup.prototype.showPositionNames = function () {
        var _this = this;
        this.busyLoadPositions = this._adminService.getPositionNames().subscribe(function (data) {
            _this.positionNames = data;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: "warning", msg: error });
        });
    };
    EditResourcePopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editResource = Object.assign({}, chg.currentValue);
                    this.userenabled =
                        this.editResource.active === "Y" ? true : false;
                    this.placeholder =
                        this.editResource.placeholder === "Y" ? true : false;
                    this.cdm =
                        this.editResource.cdm === "Y" ? true : false;
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], EditResourcePopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditResourcePopup.prototype, "reloadResources", void 0);
    EditResourcePopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-resource-popup]",
            template: __webpack_require__(/*! ./edit-resource-popup.template.html */ "./src/app/admin/components/resources/edit-resource-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [_services_laborcat_service__WEBPACK_IMPORTED_MODULE_6__["LaborCategoryService"]],
            styles: [__webpack_require__(/*! ./edit-resource-popup.styles.scss */ "./src/app/admin/components/resources/edit-resource-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditResourcePopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_admin_service__WEBPACK_IMPORTED_MODULE_5__["AdminService"],
            _tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_4__["ResourceService"],
            _services_laborcat_service__WEBPACK_IMPORTED_MODULE_6__["LaborCategoryService"]])
    ], EditResourcePopup);
    return EditResourcePopup;
}());



/***/ }),

/***/ "./src/app/admin/components/resources/edit-resource-popup.styles.scss":
/*!****************************************************************************!*\
  !*** ./src/app/admin/components/resources/edit-resource-popup.styles.scss ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/resources/edit-resource-popup.template.html":
/*!******************************************************************************!*\
  !*** ./src/app/admin/components/resources/edit-resource-popup.template.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-resource\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-resource-title\"\r\n aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-resource-title\">Edit Resource</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"editresourceform\" #editresourceform=\"ngForm\" role=\"form\" class=\"form-horizontal\"\r\n\t\t\t\t data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\" data-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"name\" class=\"col-md-3 form-control-label text-md-right\">Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"name\" [(ngModel)]=\"editResource.name\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t required data-parsley-required-message=\"Error: Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Lookup Name-->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t\t<label for=\"lookup-name\" class=\"col-md-2 form-control-label text-md-right\">Lookup Name\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"lookup-name\" [(ngModel)]=\"editResource.lookupName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Lookup Name is required\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Display Name-->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t\t<label for=\"display-name\" class=\"col-md-2 form-control-label text-md-right\">Display Name\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"display-name\" [(ngModel)]=\"editResource.displayName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\trequired data-parsley-required-message=\"Error: Display Name is required\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div>\t\t\t\t -->\r\n\t\t\t\t\t<!-- Labor Category -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"user-roles\" class=\"col-md-3 form-control-label text-md-right\">Labor Category\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"editResource.lcatCode\" name=\"laborCategories\" class=\"form-control fdatable\" id=\"user-roles\"\r\n\t\t\t\t\t\t\t required data-parsley-required-message=\"Error: Labor Category is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let lcat of laborCategories\" [value]=\"lcat.code\">\r\n\t\t\t\t\t\t\t\t\t{{lcat.description}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- Resource Type -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"res-type\" class=\"col-md-3 form-control-label text-md-right\">Resource Type\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"editResource.typeCode\" name=\"restype\" class=\"form-control fdatable\" id=\"res-type\" required\r\n\t\t\t\t\t\t\t data-parsley-required-message=\"Error: Resource Type is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let rtype of resourceTypes\" [value]=\"rtype.code\">\r\n\t\t\t\t\t\t\t\t\t{{rtype.value}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Position Names -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t\t<label for=\"res-pos\" class=\"col-md-3 form-control-label text-md-right\">Position\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<select [(ngModel)]=\"editResource.positionCode\" name=\"res-pos\" class=\"form-control fdatable\" id=\"res-pos\" required\r\n\t\t\t\t\t\t\t\t\tdata-parsley-required-message=\"Error: Position is required\">\r\n\t\t\t\t\t\t\t\t\t<option *ngFor=\"let pos of positionNames\" [value]=\"pos.code\">\r\n\t\t\t\t\t\t\t\t\t\t{{pos.value}}\r\n\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t<!-- Team Name -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"res-team\" class=\"col-md-3 form-control-label text-md-right\">Team\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"editResource.teamCode\" name=\"resteam\" class=\"form-control fdatable\" id=\"res-team\" required\r\n\t\t\t\t\t\t\t data-parsley-required-message=\"Error: Resource Type is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let rteam of resourceTeams\" [value]=\"rteam.code\">\r\n\t\t\t\t\t\t\t\t\t{{rteam.value}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!-- Team Lead -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t<label for=\"res-lead\" class=\"col-md-4 form-control-label text-md-right\">\r\n\t\t\t\t\t\t\tTeam Lead\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required field</span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"editResource.leadID\" title=\"Team Lead\" name=\"Team Lead\" class=\"form-control fdatable\" id=\"res-lead\"\r\n\t\t\t\t\t\t\t required placeholder=\"Select Team Lead\" data-parsley-required-message=\"Error: Team Lead is required\">\r\n\t\t\t\t\t\t\t\t<option></option>\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let res of listResources\" [ngValue]=\"res.resourceID\">{{res.name}}</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Email Address         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"email-address\" class=\"col-md-3 form-control-label text-md-right\">Email\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"email-address\" [(ngModel)]=\"editResource.email\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t required data-parsley-error-message=\"Error: Email is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Phone         -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t\t<label for=\"phone\" class=\"col-md-2 form-control-label text-md-right\">Phone\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"phone\" class=\"form-control\" id=\"password\" [(ngModel)]=\"editResource.phone\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\trequired data-parsley-error-message=\"Error: Phone is required\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t<!--Employee ID         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"employeeid\" class=\"col-md-3 form-control-label text-md-right\">Employee ID\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"employeeid\" [(ngModel)]=\"editResource.employeeID\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\" required data-parsley-error-message=\"Error: Employee ID is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Rate         -->\r\n\t\t\t\t\t<!-- <div class=\"form-group row\">\r\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t\t\t<label for=\"rate\" class=\"col-md-3 form-control-label text-md-right\">Rate\r\n\t\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"rate\" [(ngModel)]=\"editResource.rate\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\t\trequired data-parsley-error-message=\"Error: Rate is required\">\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t</div>\t -->\r\n\t\t\t\t\t<!--Max Hours         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"maxhours\" class=\"col-md-3 form-control-label text-md-right\">Max Hours\r\n\t\t\t\t\t\t\t<span class=\"help-block\"></span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"maxhours\" [(ngModel)]=\"editResource.maxHours\" [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Active         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-3 form-control-label text-md-right\">Active\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"userenabled\"\r\n\t\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Placeholder         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"placeholder\" class=\"col-md-3 form-control-label text-md-right\">Placeholder\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"placeholder\" [(ngModel)]=\"placeholder\"\r\n\t\t\t\t\t\t\t\t[ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--CDM         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"cdm\" class=\"col-md-3 form-control-label text-md-right\">Center Delivery Manager\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"cdm\" [(ngModel)]=\"cdm\"\r\n\t\t\t\t\t\t\t\t[ngModelOptions]=\"{standalone: true}\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateResource(editResource)\">Save Resource</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/resources/resource-dashboard.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/admin/components/resources/resource-dashboard.component.ts ***!
  \****************************************************************************/
/*! exports provided: EditResourceComponent, DeleteResourceComponent, ResourceDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditResourceComponent", function() { return EditResourceComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteResourceComponent", function() { return DeleteResourceComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceDashboardPage", function() { return ResourceDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ag_grid_enterprise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ag-grid-enterprise */ "./node_modules/ag-grid-enterprise/main.js");
/* harmony import */ var ag_grid_enterprise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ag_grid_enterprise__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var ag_grid_enterprise_chartsModule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ag-grid-enterprise/chartsModule */ "./node_modules/ag-grid-enterprise/chartsModule.js");
/* harmony import */ var ag_grid_enterprise_chartsModule__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ag_grid_enterprise_chartsModule__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
/* harmony import */ var _tdl_models_resource_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../tdl/models/resource.model */ "./src/app/tdl/models/resource.model.ts");
/* harmony import */ var _tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../tdl/services/resource.service */ "./src/app/tdl/services/resource.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var EditResourceComponent = /** @class */ (function () {
    function EditResourceComponent() {
    }
    EditResourceComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditResourceComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditResource(this.params.data);
    };
    EditResourceComponent.prototype.refresh = function () {
        return false;
    };
    EditResourceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Edit Resource\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-resource\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], EditResourceComponent);
    return EditResourceComponent;
}());

var DeleteResourceComponent = /** @class */ (function () {
    function DeleteResourceComponent() {
    }
    DeleteResourceComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteResourceComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.deleteResource(this.params.data);
    };
    DeleteResourceComponent.prototype.refresh = function () {
        return false;
    };
    DeleteResourceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Delete Resource\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
            // styles: [
            //     `.btn {
            //         line-height: 0.5
            //     }`
            // ]
        })
    ], DeleteResourceComponent);
    return DeleteResourceComponent;
}());

// con
var ResourceDashboardPage = /** @class */ (function () {
    function ResourceDashboardPage(resourceService, router) {
        this.resourceService = resourceService;
        this.dropdownData = [];
        this.delresourcetitle = "Delete Resource";
        this.delresourcemessage = "Are you sure you want to delete resource?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditResourceComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'Name',
                field: 'name',
                cellClass: function (params) {
                    return params.data.active !== 'Y' ? "fw-semi-bold inactive" : "fw-semi-bold ";
                }
            },
            {
                headerName: 'Placeholder',
                field: 'placeholder',
                cellClass: function (params) {
                    return params.data.active !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Position',
                field: 'positionName',
                cellClass: function (params) {
                    return params.data.active !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Active',
                field: 'active',
                cellClass: function (params) {
                    return params.data.active !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'CDM',
                field: 'cdm',
                cellClass: function (params) {
                    return params.data.active !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteResourceComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
        this.showCreateResource = false;
        this.showEditResource = false;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    ResourceDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input, #search-countries");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        // load the users
        this.loadResources();
    };
    ResourceDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadResources) {
            this.busyLoadResources.unsubscribe();
        }
        if (this.busyDeleteResource) {
            this.busyDeleteResource.unsubscribe();
        }
    };
    ResourceDashboardPage.prototype.ngAfterViewInit = function () {
    };
    ResourceDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    ResourceDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    ResourceDashboardPage.prototype.loadResources = function () {
        var that = this;
        this.busyLoadResources = this.resourceService.getAllNonPlaceholderResourcesOnly().subscribe(function (resources) {
            if (resources) {
                that.data = resources;
            }
        }, function (error) {
            that.showErrorFlag = true;
            that.alerts = [];
            that.alerts.push({ type: 'warning', msg: error });
        });
    };
    ResourceDashboardPage.prototype.reloadResources = function (reload) {
        this.showCreateResource = false;
        this.showEditResource = false;
        if (reload) {
            this.loadResources();
        }
        else {
            this.selResource = new _tdl_models_resource_model__WEBPACK_IMPORTED_MODULE_5__["Resource"]();
        }
    };
    ResourceDashboardPage.prototype.deleteResource = function (res) {
        var _this = this;
        if (!Object(ramda__WEBPACK_IMPORTED_MODULE_4__["isNil"])(res)) {
            this.busyDeleteResource = this.resourceService.deleteResourceById(res.resourceID).subscribe(function (data) {
                if (data) {
                    _this.reloadResources(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    ResourceDashboardPage.prototype.addResource = function () {
        this.showCreateResource = true;
    };
    ResourceDashboardPage.prototype.selectEditResource = function (resource) {
        this.showEditResource = true;
        this.selResource = resource;
    };
    ResourceDashboardPage.prototype.refreshResourceFilterObject = function () {
    };
    ResourceDashboardPage.prototype.launchSkillsSurvey = function (resourceId) {
        this.router.navigate(['app/resource/survey', resourceId]);
    };
    ResourceDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    ResourceDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "resource-dashboard",
            template: __webpack_require__(/*! ./resource-dashboard.template.html */ "./src/app/admin/components/resources/resource-dashboard.template.html"),
            providers: [_tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_6__["ResourceService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./resource-dashboard.styles.scss */ "./src/app/admin/components/resources/resource-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_tdl_services_resource_service__WEBPACK_IMPORTED_MODULE_6__["ResourceService"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], ResourceDashboardPage);
    return ResourceDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/resources/resource-dashboard.styles.scss":
/*!***************************************************************************!*\
  !*** ./src/app/admin/components/resources/resource-dashboard.styles.scss ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.resourcedashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/resources/resource-dashboard.template.html":
/*!*****************************************************************************!*\
  !*** ./src/app/admin/components/resources/resource-dashboard.template.html ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"h4 page-title hd-bdr\">Resources</h1>\r\n<div data-ng-controller=\"resourcedashboardController\" class=\"resourcedashboardController\">\r\n    <div aria-live=\"assertive\">\r\n        <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-md-12 col-xs-12\">\r\n                        <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                            <div [innerHTML]=\"alert.msg\"></div>\r\n                        </alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n            <section class=\"widget h-divider\" widget>\r\n                <div class=\"widget-body\">\r\n                    <div class=\"row\" style=\"margin-bottom: 20px;\">\r\n                        <div class=\"col-md-6\">\r\n                        </div>\r\n                        <div class=\"col-lg-offset-1 col-md-4\">\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-cr-resource\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-resource\" title=\"Add Resource\"\r\n                                    (click)=\"addResource()\">\r\n                                    <i class=\"glyphicon glyphicon-plus\"></i>\r\n                                    Add Resource\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"grid-wrapper\">\r\n                        <ag-grid-angular\r\n                            #agGrid\r\n                            style=\"width: 100%; height: 650px;\"\r\n                            class=\"ag-theme-balham\"\r\n                            [rowData]=\"data\"\r\n                            [columnDefs]=\"columnDefs\"\r\n                            [defaultColDef]=\"defaultColDef\"\r\n                            [gridOptions]=\"gridOptions\"\r\n                            [floatingFilter]=\"true\"\r\n                            [pagination]=\"true\"\r\n                            (gridReady)=\"onGridReady($event)\"\r\n                            [paginationAutoPageSize]=\"true\"\r\n                            >\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </div>\r\n                <div class=\"widget-footer\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-xs-12\">\r\n                            <div class=\"pull-right\">\r\n                                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary\"\r\n                                    (click)=\"onClickBackButton()\">\r\n                                    <span class=\"glyphicon glyphicon-chevron-left txt-gap\"\r\n                                        aria-hidden=\"true\"></span>Back</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"showCreateResource\" create-resource-popup (reloadResources)=\"reloadResources($event)\"></div>\r\n    <div *ngIf=\"showEditResource\" edit-resource-popup [model]=\"selResource\" (reloadResources)=\"reloadResources($event)\"></div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/users/create-user-popup.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/admin/components/users/create-user-popup.component.ts ***!
  \***********************************************************************/
/*! exports provided: CreateUserPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateUserPopup", function() { return CreateUserPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_user_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/user.model */ "./src/app/admin/models/user.model.ts");
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/admin.service */ "./src/app/admin/services/admin.service.ts");
/* harmony import */ var _services_role_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/role.service */ "./src/app/admin/services/role.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Component for creating user
*/





var CreateUserPopup = /** @class */ (function () {
    function CreateUserPopup(router, _adminService, _roleService) {
        this._adminService = _adminService;
        this._roleService = _roleService;
        this.reloadUsers = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.user = new _models_user_model__WEBPACK_IMPORTED_MODULE_2__["User"]();
        this.userRoles = [];
        this.router = router;
        this.alerts = [
            {
                type: 'warning',
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.showUserRoles();
    }
    CreateUserPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    CreateUserPopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
    };
    // Create a new user
    CreateUserPopup.prototype.createUser = function (user) {
        var _this = this;
        jQuery('#adduserform').parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery('#adduserform').parsley().isValid()) {
            switch (user.role) {
                case "Administrator":
                    user.role = "ROLE_ADMIN";
                    break;
                case "PMO":
                    user.role = "ROLE_PMO";
                    break;
                case "Project Manager":
                    user.role = "ROLE_PM";
                    break;
                default:
                    user.role = "ROLE_USER";
                    break;
            }
            user.email = user.email.toLowerCase();
            user.enabled = (this.userenabled === true ? 'Y' : 'N');
            this.busy = this._adminService.createUser(user).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                    _this.reloadUsers.emit(true);
                }
            }, function (error) {
                if (error.indexOf('USER_EMAIL_UK') > -1) {
                    error = "User already exists";
                }
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    CreateUserPopup.prototype.reset = function (flag) {
        jQuery('#create-user').on('hidden').find('#first-name').val('');
        jQuery('#create-user').on('hidden').find('#last-name').val('');
        jQuery('#create-user').on('hidden').find('#email-address').val('');
        jQuery('#create-user').on('hidden').find('#password').val('');
        jQuery('#create-user').on('hidden').find('#phone-number').val('');
        jQuery('#create-user').on('hidden').find('input[type="email"]').val('');
        jQuery('#create-user').on('hidden').find('input[type="checkbox"]').prop('checked', false);
        jQuery('#adduserform').parsley().reset();
        jQuery('#create-user').modal('hide');
        this.showErrorFlag = false;
    };
    CreateUserPopup.prototype.showUserRoles = function () {
        var _this = this;
        this._roleService.getRoles().subscribe(function (r) {
            _this.userRoles = r;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CreateUserPopup.prototype, "reloadUsers", void 0);
    CreateUserPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: '[create-user-popup]',
            template: __webpack_require__(/*! ./create-user-popup.template.html */ "./src/app/admin/components/users/create-user-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./create-user-popup.styles.scss */ "./src/app/admin/components/users/create-user-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class CreateUserPopup
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_admin_service__WEBPACK_IMPORTED_MODULE_3__["AdminService"],
            _services_role_service__WEBPACK_IMPORTED_MODULE_4__["RoleService"]])
    ], CreateUserPopup);
    return CreateUserPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/users/create-user-popup.styles.scss":
/*!**********************************************************************!*\
  !*** ./src/app/admin/components/users/create-user-popup.styles.scss ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/users/create-user-popup.template.html":
/*!************************************************************************!*\
  !*** ./src/app/admin/components/users/create-user-popup.template.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"create-user\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"create-user-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"create-user-title\">Add User</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"adduserform\" #adduserform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Role -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"user-roles\" class=\"col-md-2 form-control-label text-md-right\">Role\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"user.role\" name=\"userRoles\" class=\"form-control fdatable\" id=\"user-roles\" required data-parsley-required-message=\"Error: Role is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let role of userRoles\" [value]=\"role.roleDescription\">\r\n\t\t\t\t\t\t\t\t\t{{role.roleDescription}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--First Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"first-name\" class=\"col-md-3 form-control-label text-md-right\">First Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"first-name\" [(ngModel)]=\"user.firstName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-required-message=\"Error: First Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Last Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"last-name\" class=\"col-md-2 form-control-label text-md-right\">Last Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"last-name\" [(ngModel)]=\"user.lastName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-required-message=\"Error: Last Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Email Address         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"email-address\" class=\"col-md-2 form-control-label text-md-right\">User ID\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"email-address\" [(ngModel)]=\"user.email\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-error-message=\"Error: User ID is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Password         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"password\" class=\"col-md-2 form-control-label text-md-right\">Password\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"password\" [(ngModel)]=\"user.password\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-error-message=\"Error: Password is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Employee ID         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t\t<label for=\"employeeid\" class=\"col-md-2 form-control-label text-md-right\">Employee ID\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"employeeid\" [(ngModel)]=\"user.employeeId\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\trequired data-parsley-error-message=\"Error: Employee ID is required\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t\t<!--Enabled         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-2 form-control-label text-md-right\">Enabled\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" [(ngModel)]=\"userenabled\" [ngModelOptions]=\"{standalone: true}\">\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"createUser(user)\">Save User</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/users/edit-user-popup.component.ts":
/*!*********************************************************************!*\
  !*** ./src/app/admin/components/users/edit-user-popup.component.ts ***!
  \*********************************************************************/
/*! exports provided: EditUserPopup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditUserPopup", function() { return EditUserPopup; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_user_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/user.model */ "./src/app/admin/models/user.model.ts");
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/admin.service */ "./src/app/admin/services/admin.service.ts");
/* harmony import */ var _services_role_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/role.service */ "./src/app/admin/services/role.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
this is Componentfor adding contact as a popup.
*/





var EditUserPopup = /** @class */ (function () {
    function EditUserPopup(router, _adminService, _roleService) {
        this._adminService = _adminService;
        this._roleService = _roleService;
        this.reloadUsers = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.editUser = new _models_user_model__WEBPACK_IMPORTED_MODULE_2__["User"]();
        this.userRoles = [];
        this.router = router;
        this.alerts = [
            {
                type: "warning",
                msg: '<span class="fw-semi-bold">Warning:</span> Placeholder for Error Validation messages'
            }
        ];
        this.showErrorFlag = false;
        this.showUserRoles();
    }
    EditUserPopup.prototype.ngOnInit = function () {
        this.showErrorFlag = false;
    };
    EditUserPopup.prototype.ngOnDestroy = function () {
        if (this.busy) {
            this.busy.unsubscribe();
        }
    };
    // Update user
    EditUserPopup.prototype.updateUser = function (user) {
        var _this = this;
        jQuery("#edituserform").parsley().validate();
        // Toggle to edit mode or navigate to the next screen if validation passes
        if (jQuery("#edituserform").parsley().isValid()) {
            switch (user.role) {
                case "Administrator":
                    user.role = "ROLE_ADMIN";
                    break;
                case "PMO":
                    user.role = "ROLE_PMO";
                    break;
                case "Project Manager":
                    user.role = "ROLE_PM";
                    break;
                default:
                    user.role = "ROLE_USER";
                    break;
            }
            user.email = user.email.toLowerCase();
            user.enabled = (this.userenabled === true ? "Y" : "N");
            this.busy = this._adminService.updateUser(user).subscribe(function (data) {
                if (data) {
                    _this.reset(true);
                }
            }, function (error) {
                if (error.indexOf("USER_EMAIL_UK") > -1) {
                    error = "User already exists";
                }
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: "warning", msg: error });
            });
        }
    };
    EditUserPopup.prototype.reset = function (flag) {
        jQuery("#edit-user").on("hidden").find("#first-name").val("");
        jQuery("#edit-user").on("hidden").find("#last-name").val("");
        jQuery("#edit-user").on("hidden").find("#email-address").val("");
        jQuery("#edit-user").on("hidden").find("#password").val("");
        jQuery("#edit-user").on("hidden").find("#phone-number").val("");
        jQuery("#edit-user").on("hidden").find('input[type="email"]').val("");
        jQuery("#edit-user").on("hidden").find('input[type="checkbox"]').prop("checked", false);
        jQuery("#edituserform").parsley().reset();
        jQuery("#edit-user").modal("hide");
        this.reloadUsers.emit(flag);
        this.showErrorFlag = false;
    };
    EditUserPopup.prototype.showUserRoles = function () {
        var _this = this;
        this._roleService.getRoles().subscribe(function (r) {
            // let roles = r.map(r => r.roleDescription);
            // console.log(`...edit-user-popup.component: roles===${JSON.stringify(roles)}`);
            // Initialize blank role first and concat the rolenames afterwards
            _this.userRoles = r;
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    EditUserPopup.prototype.ngOnChanges = function (changes) {
        for (var propName in changes) {
            if (propName === "model") {
                var chg = changes[propName];
                if (chg.currentValue) {
                    this.editUser = Object.assign({}, chg.currentValue);
                    this.userenabled = (this.editUser.enabled === "Y" ? true : false);
                }
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], EditUserPopup.prototype, "model", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditUserPopup.prototype, "reloadUsers", void 0);
    EditUserPopup = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "[edit-user-popup]",
            template: __webpack_require__(/*! ./edit-user-popup.template.html */ "./src/app/admin/components/users/edit-user-popup.template.html"),
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./edit-user-popup.styles.scss */ "./src/app/admin/components/users/edit-user-popup.styles.scss")]
        })
        /**
         *
         *
         * @export
         * @class EditUserPage
         * @implements {OnInit}
         */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_admin_service__WEBPACK_IMPORTED_MODULE_3__["AdminService"],
            _services_role_service__WEBPACK_IMPORTED_MODULE_4__["RoleService"]])
    ], EditUserPopup);
    return EditUserPopup;
}());



/***/ }),

/***/ "./src/app/admin/components/users/edit-user-popup.styles.scss":
/*!********************************************************************!*\
  !*** ./src/app/admin/components/users/edit-user-popup.styles.scss ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-divider {\n  width: 100%;\n  border-bottom: 3px solid #778899; }\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid gray;\n  padding-bottom: 10px; }\ninput.parsley-error {\n  border-color: #d9534f;\n  box-shadow: inset 0 1px 1px rgba(217, 83, 79, 0.075); }\n.parsley-errors-list {\n  font-size: 85%;\n  padding-left: 0;\n  margin-bottom: 5px; }\n.parsley-errors-list li {\n    list-style: none;\n    color: #d9534f; }\n.switch {\n  box-sizing: content-box;\n  margin-left: -20px; }\n.switch i {\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -20px;\n  margin-bottom: -3px;\n  padding-right: 20px;\n  transition: all ease 0.2s;\n  -webkit-transition: all ease 0.2s;\n  border-radius: 20px;\n  box-shadow: inset 0 0 1px rgba(0, 0, 0, 0.5); }\n.switch i:before {\n  display: block;\n  content: '';\n  width: 30px;\n  height: 30px;\n  padding: 1px;\n  border-radius: 20px;\n  background: white;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5); }\n.switch :checked + i {\n  padding-right: 0;\n  padding-left: 20px;\n  background: #64bd63; }\n.white, .white a {\n  color: #fff; }\n.btn-label {\n  background: transparent;\n  left: 2px;\n  padding: 1px 6px; }\n.md-editor {\n  display: block;\n  border: 1px solid #dee2e6; }\n.md-editor > .md-header, .md-editor .md-footer {\n    display: block;\n    padding: 6px 4px;\n    background: #f5f5f5; }\n.md-editor > .md-header {\n    margin: 0; }\n.md-editor > .md-header .glyphicon {\n      top: 3px; }\n.md-editor > .md-preview {\n    margin-left: -1px;\n    margin-right: -1px;\n    padding: 0.5rem 1rem;\n    background: #fff;\n    border-top: 1px dashed #dee2e6;\n    min-height: 10px; }\n.md-editor > textarea {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n    font-size: 1rem;\n    outline: 0;\n    outline: thin dotted  \\9;\n    /* IE6-9 */\n    margin: 0;\n    display: block;\n    width: 100%;\n    border: 0;\n    border-top: 1px dashed #dee2e6;\n    border-radius: 0;\n    box-shadow: none;\n    background: #dee2e6; }\n.md-editor > textarea:focus {\n      box-shadow: none;\n      background: #fff; }\n.md-editor.active {\n    border-color: #4d90fe;\n    outline: 0; }\n/**\r\n * Bootstrap select\r\n */\n.selectpicker.form-control {\n  height: auto; }\n.bootstrap-select .dropdown-toggle {\n  padding-left: 10px; }\n.bootstrap-select .dropdown-toggle:after {\n    margin-right: 0;\n    margin-left: 0; }\n.bootstrap-select .dropdown-menu > li > a {\n  display: block;\n  width: 100%;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #555;\n  text-align: inherit;\n  white-space: nowrap;\n  background: none;\n  border: 0; }\n.bootstrap-select .dropdown-menu > li > a:hover, .bootstrap-select .dropdown-menu > li > a:focus {\n    color: #171717;\n    text-decoration: none;\n    background-color: #f5f5f5; }\n.bootstrap-select .dropdown-menu > li > a.active, .bootstrap-select .dropdown-menu > li > a.active:hover, .bootstrap-select .dropdown-menu > li > a.active:focus {\n    color: #fff;\n    text-decoration: none;\n    background-color: #5d8fc2;\n    outline: 0; }\n.bootstrap-select .dropdown-menu > li > a.disabled, .bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    color: #868e96; }\n.bootstrap-select .dropdown-menu > li > a.disabled:hover, .bootstrap-select .dropdown-menu > li > a.disabled:focus {\n    text-decoration: none;\n    cursor: not-allowed;\n    background-color: transparent;\n    background-image: none; }\n/**\r\n*  autosize\r\n**/\n/***********************************/\n/**          NEWS LIST           **/\n/**********************************/\n.news-list {\n  margin-bottom: 0;\n  padding-left: 0; }\n.news-list li {\n    list-style: none;\n    box-sizing: content-box;\n    border-top: 1px solid #eeeeee;\n    padding: 12px;\n    cursor: pointer;\n    -webkit-transition: background-color 0.2s ease-out;\n    transition: background-color 0.2s ease-out; }\n@media screen and (prefers-reduced-motion: reduce) {\n      .news-list li {\n        -webkit-transition: none;\n        transition: none; } }\n.news-list li:hover {\n      background: #dbdbdb; }\n.news-list li:last-child {\n      margin-bottom: -10px; }\n.news-list img,\n  .news-list .icon {\n    float: left;\n    height: 50px;\n    width: 50px; }\n.news-list .icon {\n    line-height: 50px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 28px; }\n.news-list .news-item-info {\n    margin-left: 62px;\n    /*50 + 12px padding*/ }\n.news-list .name {\n    text-transform: uppercase; }\n.news-list .name a {\n      text-decoration: none; }\n.news-list .name a:hover {\n        color: #218bc3; }\n.autogrow {\n  overflow: hidden;\n  resize: none; }\n.form-checkbox {\n  margin-left: 5px;\n  width: 20px;\n  height: 20px;\n  box-shadow: none; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/users/edit-user-popup.template.html":
/*!**********************************************************************!*\
  !*** ./src/app/admin/components/users/edit-user-popup.template.html ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"modal fade\" id=\"edit-user\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"edit-user-title\" aria-hidden=\"true\">\r\n\t<div class=\"modal-dialog modal-lg\">\r\n\t\t<div class=\"modal-content\">\r\n\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t<h1 class=\"h4 modal-title text-xs-left fw-bold mt\" id=\"edit-user-title\">Edit User</h1>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Body-->\r\n\t\t\t<div class=\"modal-body\">\r\n\t\t\t\t<form id=\"edituserform\" #edituserform=\"ngForm\" role=\"form\" class=\"form-horizontal\" data-parsley-priority-enabled=\"false\" novalidate=\"novalidate\"\r\n\t\t\t\t\tdata-parsley-validate data-parsley-focus=\"first\">\r\n\t\t\t\t\t<!-- Role Description -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"user-roles\" class=\"col-md-2 form-control-label text-md-right\">Role\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<select [(ngModel)]=\"editUser.role\" name=\"userRoles\" class=\"form-control fdatable\" id=\"user-roles\" required data-parsley-required-message=\"Error: Role is required\">\r\n\t\t\t\t\t\t\t\t<option *ngFor=\"let role of userRoles\" [value]=\"role.roleDescription\">\r\n\t\t\t\t\t\t\t\t\t{{role.roleDescription}}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--First Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-1\"></div>\r\n\t\t\t\t\t\t<label for=\"first-name\" class=\"col-md-3 form-control-label text-md-right\">First Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"first-name\" [(ngModel)]=\"editUser.firstName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-required-message=\"Error: First Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Last Name-->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"last-name\" class=\"col-md-2 form-control-label text-md-right\">Last Name\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"last-name\" [(ngModel)]=\"editUser.lastName\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-required-message=\"Error: Last Name is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--User ID         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"email-address\" class=\"col-md-2 form-control-label text-md-right\">User ID\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"email-address\" [(ngModel)]=\"editUser.email\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-error-message=\"Error: User ID is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Password         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"password\" class=\"col-md-2 form-control-label text-md-right\">Password\r\n\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"password\" [(ngModel)]=\"editUser.password\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t    required data-parsley-error-message=\"Error: Password is required\">\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<!--Employee ID         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t\t<label for=\"employeeid\" class=\"col-md-2 form-control-label text-md-right\">Employee ID\r\n\t\t\t\t\t\t\t\t<span class=\"help-block\">Required </span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"employeeid\" [(ngModel)]=\"editUser.employeeId\" [ngModelOptions]=\"{standalone: true}\"\r\n\t\t\t\t\t\t\t\t\trequired data-parsley-error-message=\"Error: Employee ID is required\">\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t\t<!--Enabled         -->\r\n\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t\t<label for=\"enabled\" class=\"col-md-2 form-control-label text-md-right\">Enabled\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<div class=\"col-md-6 col-xs-12\">\r\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control form-checkbox\" id=\"enabled\" \r\n\t\t\t\t\t\t\t[(ngModel)]=\"userenabled\" [ngModelOptions]=\"{standalone: true}\">\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"col-md-2\"></div>\r\n\t\t\t\t\t</div>\t\t\t\t\t\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div aria-live=\"assertive\">\r\n\t\t\t\t<div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-xs-12\">\r\n\t\t\t\t\t\t<div class=\"form-group row\">\r\n\t\t\t\t\t\t\t<div class=\"col-md-12 col-xs-12\">\r\n\t\t\t\t\t\t\t\t<alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]=\"alert.msg\"></div>\r\n\t\t\t\t\t\t\t\t</alert>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--Modal Footer-->\r\n\t\t\t<div class=\"modal-footer\">\r\n\t\t\t\t<button type=\"button\" id=\"btn-save\" class=\"btn btn-primary\" (click)=\"updateUser(editUser)\">Save User</button>\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" (click)=\"reset(false)\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/components/users/user-dashboard.component.ts":
/*!********************************************************************!*\
  !*** ./src/app/admin/components/users/user-dashboard.component.ts ***!
  \********************************************************************/
/*! exports provided: EditUserComponent, DeleteUserComponent, UserDashboardPage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditUserComponent", function() { return EditUserComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteUserComponent", function() { return DeleteUserComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserDashboardPage", function() { return UserDashboardPage; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_user_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../models/user.model */ "./src/app/admin/models/user.model.ts");
/* harmony import */ var _services_admin_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/admin.service */ "./src/app/admin/services/admin.service.ts");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var EditUserComponent = /** @class */ (function () {
    function EditUserComponent() {
    }
    EditUserComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    EditUserComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.selectEditUser(this.params.data);
    };
    EditUserComponent.prototype.refresh = function () {
        return false;
    };
    EditUserComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'edit-cell',
            template: "<i class=\"glyphicon glyphicon-pencil\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Edit User\"\n                   data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#edit-user\"></i>"
        })
    ], EditUserComponent);
    return EditUserComponent;
}());

var DeleteUserComponent = /** @class */ (function () {
    function DeleteUserComponent() {
    }
    DeleteUserComponent.prototype.agInit = function (params) {
        this.params = params;
    };
    DeleteUserComponent.prototype.invokeParentMethod = function () {
        this.params.context.componentParent.deleteUser(this.params.data);
    };
    DeleteUserComponent.prototype.refresh = function () {
        return false;
    };
    DeleteUserComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'delete-cell',
            template: "<i class=\"glyphicon glyphicon-trash txt-gap\" (click)=\"invokeParentMethod()\" data-toggle=\"modal\" title=\"Delete User\"\n  data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#confirm-popup\"></i>"
        })
    ], DeleteUserComponent);
    return DeleteUserComponent;
}());

// con
var UserDashboardPage = /** @class */ (function () {
    function UserDashboardPage(_adminService, router) {
        this._adminService = _adminService;
        this.dropdownData = [];
        this.delusertitle = "Delete User";
        this.delusermessage = "Are you sure you want to delete user?";
        this.confirmClicked = false;
        this.cancelClicked = false;
        this.defaultColDef = {
            sortable: true,
            filter: true,
            headerClass: 'fw-semi-bold'
        };
        this.columnDefs = [
            {
                headerName: "",
                field: "value",
                cellRendererFramework: EditUserComponent,
                colId: "params",
                width: 50,
                filter: false
            },
            {
                headerName: 'First Name',
                field: 'firstName',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "fw-semi-bold inactive" : "fw-semi-bold ";
                }
            },
            {
                headerName: 'Last Name',
                field: 'lastName',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Login Id',
                field: 'email',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Role',
                field: 'role',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: 'Active',
                field: 'enabled',
                cellClass: function (params) {
                    return params.data.enabled !== 'Y' ? "inactive" : "";
                }
            },
            {
                headerName: "",
                field: "value",
                cellRendererFramework: DeleteUserComponent,
                colId: "params",
                width: 50,
                filter: false
            }
        ];
        this.alerts = [
            {
                type: "success",
                msg: '<i class="fa fa-circle text-success"></i><span class="alert-text">Successfully generated 12 monthly reports</span>'
            }
        ];
        this.router = router;
        this.showCreateUser = false;
        this.showEditUser = false;
        this.gridOptions = {
            context: {
                componentParent: this
            },
            enableColResize: true,
            rowHeight: 30
        };
    }
    UserDashboardPage.prototype.ngOnInit = function () {
        var searchInput = jQuery("#table-search-input, #search-countries");
        searchInput
            .focus(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .addClass("focus");
        })
            .focusout(function (e) {
            jQuery(e.target)
                .closest(".input-group")
                .removeClass("focus");
        });
        // load the users
        this.loadUsers();
    };
    UserDashboardPage.prototype.ngOnDestroy = function () {
        if (this.busyLoadMissingUsers) {
            this.busyLoadMissingUsers.unsubscribe();
        }
        if (this.busyLoadUsers) {
            this.busyLoadUsers.unsubscribe();
        }
        if (this.busyDeleteUser) {
            this.busyDeleteUser.unsubscribe();
        }
    };
    UserDashboardPage.prototype.ngAfterViewInit = function () {
    };
    UserDashboardPage.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    UserDashboardPage.prototype.cosmeticFix = function (elementID) {
        // The code below for cosmetic fix - Blue box now surrounds the icon on the search company text box
        var filterInput = jQuery(elementID);
        filterInput
            .focus(function (e) {
            jQuery(e.target).closest('.input-group').addClass('focus');
        })
            .focusout(function (e) {
            jQuery(e.target).closest('.input-group').removeClass('focus');
        });
    };
    UserDashboardPage.prototype.loadUsers = function () {
        var _this = this;
        this.busyLoadUsers = this._adminService.getUsers().subscribe(function (users) {
            if (users) {
                _this.data = users;
            }
        }, function (error) {
            _this.showErrorFlag = true;
            _this.alerts = [];
            _this.alerts.push({ type: 'warning', msg: error });
        });
    };
    UserDashboardPage.prototype.reloadUsers = function (reload) {
        this.showCreateUser = false;
        this.showEditUser = false;
        if (reload) {
            this.loadUsers();
        }
        else {
            this.selUser = new _models_user_model__WEBPACK_IMPORTED_MODULE_2__["User"]();
        }
    };
    UserDashboardPage.prototype.deleteUser = function (user) {
        var _this = this;
        if (!Object(ramda__WEBPACK_IMPORTED_MODULE_4__["isNil"])(user)) {
            this.busyDeleteUser = this._adminService.deleteUserById(user.userId).subscribe(function (data) {
                if (data) {
                    _this.reloadUsers(true);
                }
            }, function (error) {
                _this.showErrorFlag = true;
                _this.alerts = [];
                _this.alerts.push({ type: 'warning', msg: error });
            });
        }
    };
    UserDashboardPage.prototype.addUser = function () {
        this.showCreateUser = true;
    };
    UserDashboardPage.prototype.selectEditUser = function (user) {
        this.showEditUser = true;
        this.selUser = user;
    };
    UserDashboardPage.prototype.refreshResourceFilterObject = function () {
    };
    UserDashboardPage.prototype.onClickBackButton = function () {
        this.router.navigate(["/app/tdl/search"]);
    };
    UserDashboardPage = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: "user-dashboard",
            template: __webpack_require__(/*! ./user-dashboard.template.html */ "./src/app/admin/components/users/user-dashboard.template.html"),
            providers: [_services_admin_service__WEBPACK_IMPORTED_MODULE_3__["AdminService"]],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [__webpack_require__(/*! ./user-dashboard.styles.scss */ "./src/app/admin/components/users/user-dashboard.styles.scss")]
        }),
        __metadata("design:paramtypes", [_services_admin_service__WEBPACK_IMPORTED_MODULE_3__["AdminService"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], UserDashboardPage);
    return UserDashboardPage;
}());



/***/ }),

/***/ "./src/app/admin/components/users/user-dashboard.styles.scss":
/*!*******************************************************************!*\
  !*** ./src/app/admin/components/users/user-dashboard.styles.scss ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n\r\n * Typography\r\n * ======================================================================== */\n.h-thin-divider {\n  width: 100%;\n  border-bottom: 1px solid #ddd; }\n.userdashboardController {\n  width: 98%; }\n.inactive {\n  text-decoration: line-through; }\n\r\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/admin/components/users/user-dashboard.template.html":
/*!*********************************************************************!*\
  !*** ./src/app/admin/components/users/user-dashboard.template.html ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <h1 class=\"card-title\">Users\r\n            <div class=\"pull-right\">\r\n                <button id=\"btn-cr-user\" type=\"button\" class=\"btn btn-outline-primary\" data-toggle=\"modal\"\r\n                    data-keyboard=\"false\" data-backdrop=\"static\" data-target=\"#create-user\" title=\"Add User\"\r\n                    (click)=\"addUser()\">\r\n                    <i class=\"fa fa-plus\"></i>\r\n                    Add User\r\n                </button>\r\n            </div>\r\n        </h1>\r\n        <div aria-live=\"assertive\">\r\n            <div role=\"alert\" *ngIf=\"showErrorFlag\" class=\"row\">\r\n                <div class=\"col-lg-12 col-xs-12\">\r\n                    <div class=\"form-group row\">\r\n                        <div class=\"col-md-12 col-xs-12\">\r\n                            <alert *ngFor=\"let alert of alerts; let i = index\" [type]=\"alert.type + ' alert-sm'\">\r\n                                <div [innerHTML]=\"alert.msg\"></div>\r\n                            </alert>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <div class=\"grid-wrapper\">\r\n                    <ag-grid-angular #agGrid style=\"width: 100%; height: 650px;\" class=\"ag-theme-balham\"\r\n                        [rowData]=\"data\" [columnDefs]=\"columnDefs\" [defaultColDef]=\"defaultColDef\"\r\n                        [gridOptions]=\"gridOptions\" [floatingFilter]=\"true\" [pagination]=\"true\"\r\n                        (gridReady)=\"onGridReady($event)\" [paginationAutoPageSize]=\"true\">\r\n                    </ag-grid-angular>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-lg-12 col-xs-12\">\r\n                <button id=\"btn-go-back\" type=\"button\" class=\"btn btn-primary pull-right\" (click)=\"onClickBackButton()\">\r\n                    <span class=\"fa fa-chevron-left txt-gap\" aria-hidden=\"true\"></span>Back</button>\r\n            </div>\r\n        </div>\r\n        <div *ngIf=\"showCreateUser\" create-user-popup (reloadUsers)=\"reloadUsers($event)\"></div>\r\n        <div *ngIf=\"showEditUser\" edit-user-popup [model]=\"selUser\" (reloadUsers)=\"reloadUsers($event)\"></div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/models/account.model.ts":
/*!***********************************************!*\
  !*** ./src/app/admin/models/account.model.ts ***!
  \***********************************************/
/*! exports provided: Account */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Account", function() { return Account; });
var Account = /** @class */ (function () {
    function Account() {
        this.enabled = 'Y';
    }
    return Account;
}());



/***/ }),

/***/ "./src/app/admin/models/client.model.ts":
/*!**********************************************!*\
  !*** ./src/app/admin/models/client.model.ts ***!
  \**********************************************/
/*! exports provided: Client */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Client", function() { return Client; });
var Client = /** @class */ (function () {
    function Client() {
        this.enabled = 'Y';
    }
    return Client;
}());



/***/ }),

/***/ "./src/app/admin/models/laborcat.model.ts":
/*!************************************************!*\
  !*** ./src/app/admin/models/laborcat.model.ts ***!
  \************************************************/
/*! exports provided: LaborCategory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LaborCategory", function() { return LaborCategory; });
var LaborCategory = /** @class */ (function () {
    function LaborCategory() {
        this.enabled = true;
    }
    return LaborCategory;
}());



/***/ }),

/***/ "./src/app/admin/models/lcatgroup.model.ts":
/*!*************************************************!*\
  !*** ./src/app/admin/models/lcatgroup.model.ts ***!
  \*************************************************/
/*! exports provided: LaborCategoryGroup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LaborCategoryGroup", function() { return LaborCategoryGroup; });
var LaborCategoryGroup = /** @class */ (function () {
    function LaborCategoryGroup() {
    }
    return LaborCategoryGroup;
}());



/***/ }),

/***/ "./src/app/admin/models/lookup.model.ts":
/*!**********************************************!*\
  !*** ./src/app/admin/models/lookup.model.ts ***!
  \**********************************************/
/*! exports provided: Lookup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lookup", function() { return Lookup; });
var Lookup = /** @class */ (function () {
    function Lookup() {
    }
    return Lookup;
}());



/***/ }),

/***/ "./src/app/admin/models/user.model.ts":
/*!********************************************!*\
  !*** ./src/app/admin/models/user.model.ts ***!
  \********************************************/
/*! exports provided: User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "User", function() { return User; });
var User = /** @class */ (function () {
    function User() {
    }
    return User;
}());



/***/ }),

/***/ "./src/app/admin/services/account.service.ts":
/*!***************************************************!*\
  !*** ./src/app/admin/services/account.service.ts ***!
  \***************************************************/
/*! exports provided: AccountService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountService", function() { return AccountService; });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/*
@author : Deloitte
Service class to perform account related operations.
*/
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpHeaders"]({ "Content-Type": "application/json" })
};
/**
 *
 *
 * @export
 * @class AccountService
 */
var AccountService = /** @class */ (function () {
    function AccountService(http) {
        this.http = http;
        this.getAccountUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/v1/accounts';
        this.getTDLUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/v1/tdl';
    }
    AccountService.prototype.saveAccount = function (newAccount) {
        var _this = this;
        return this.http.post(this.getAccountUrl, newAccount, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("saveAccount"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("saveAccount")));
    };
    AccountService.prototype.getAccount = function (id) {
        var _this = this;
        return this.http.get(this.getAccountUrl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getAccount"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getAccount")));
    };
    AccountService.prototype.deleteAccountById = function (id) {
        var _this = this;
        return this.http.delete(this.getAccountUrl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("deleteAccountById"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("deleteAccountById")));
    };
    AccountService.prototype.getAll = function () {
        var _this = this;
        return this.http.get(this.getTDLUrl + '/account/list', httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getAll"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getAll")));
    };
    AccountService.prototype.loadIndustries = function () {
        var _this = this;
        return this.http.get(this.getTDLUrl + '/industry/list', httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("loadIndustries"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("loadIndustries")));
    };
    AccountService.prototype.loadSectorsForIndustry = function (industryId) {
        var _this = this;
        return this.http.get(this.getTDLUrl + '/sector/list/' + industryId, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("loadSectorsForIndustry"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("loadSectorsForIndustry")));
    };
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    AccountService.prototype.handleError = function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = "operation"; }
        return function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            _this.log("${operation} failed: ${error.message}");
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(result);
        };
    };
    /** Log a Attribute Service message with the MessageService */
    AccountService.prototype.log = function (message) {
        //this.messageService.add("Profile Service: ${message}");
    };
    AccountService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpClient"]])
    ], AccountService);
    return AccountService;
}());



/***/ }),

/***/ "./src/app/admin/services/client.service.ts":
/*!**************************************************!*\
  !*** ./src/app/admin/services/client.service.ts ***!
  \**************************************************/
/*! exports provided: ClientService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClientService", function() { return ClientService; });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/*
@author : Deloitte
Service class to perform client related operations.
*/
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpHeaders"]({ "Content-Type": "application/json" })
};
/**
 *
 *
 * @export
 * @class ClientService
 */
var ClientService = /** @class */ (function () {
    function ClientService(http) {
        this.http = http;
        this.getClientUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/v1/clients';
        this.getTDLUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/v1/tdl';
    }
    ClientService.prototype.saveClient = function (newClient) {
        var _this = this;
        return this.http.post(this.getClientUrl, newClient, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("saveClient"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("saveClient")));
    };
    ClientService.prototype.getClient = function (id) {
        var _this = this;
        return this.http.get(this.getClientUrl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getClient"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getClient")));
    };
    ClientService.prototype.deleteClientById = function (id) {
        var _this = this;
        return this.http.delete(this.getClientUrl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("deleteClientById"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("deleteClientById")));
    };
    ClientService.prototype.getAll = function () {
        var _this = this;
        return this.http.get(this.getTDLUrl + '/client/list', httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getAll"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getAll")));
    };
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    ClientService.prototype.handleError = function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = "operation"; }
        return function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            _this.log("${operation} failed: ${error.message}");
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(result);
        };
    };
    /** Log a Attribute Service message with the MessageService */
    ClientService.prototype.log = function (message) {
        //this.messageService.add("Profile Service: ${message}");
    };
    ClientService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpClient"]])
    ], ClientService);
    return ClientService;
}());



/***/ }),

/***/ "./src/app/admin/services/lcatgroup.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/admin/services/lcatgroup.service.ts ***!
  \*****************************************************/
/*! exports provided: LaborCategoryGroupService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LaborCategoryGroupService", function() { return LaborCategoryGroupService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/*
@author : Deloitte
Service class to perform resource related operations.
*/
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpHeaders"]({ "Content-Type": "application/json" })
};
/**
 *
 *
 * @export
 * @class LaborCategoryGroupService
 */
var LaborCategoryGroupService = /** @class */ (function () {
    function LaborCategoryGroupService(http) {
        this.http = http;
        this.getLCATGroupUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/v1/lcatgroups';
    }
    LaborCategoryGroupService.prototype.saveLaborCategoryGroup = function (lcatGroup) {
        var _this = this;
        return this.http.post(this.getLCATGroupUrl, lcatGroup, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (_) { return _this.log("saveLaborCategory"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.handleError("saveLaborCategory")));
    };
    LaborCategoryGroupService.prototype.getLaborCategoryGroup = function (id) {
        var _this = this;
        return this.http.get(this.getLCATGroupUrl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (_) { return _this.log("getLaborCategoryGroup"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.handleError("getLaborCategoryGroup")));
    };
    LaborCategoryGroupService.prototype.deleteLCATGroupById = function (id) {
        var _this = this;
        return this.http.delete(this.getLCATGroupUrl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (_) { return _this.log("deleteLCATGroupById"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.handleError("deleteLCATGroupById")));
    };
    /**
     *
     *
     * @param {laborCategoryId} laborCategoryId
     * @returns
     *
     * @memberOf LaborCategoryGroupService
     */
    LaborCategoryGroupService.prototype.getAll = function () {
        var _this = this;
        return this.http.get(this.getLCATGroupUrl, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (_) { return _this.log("getAll"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.handleError("getAll")));
    };
    /**
 *
 *
 * @param {laborCategoryId} laborCategoryId
 * @returns
 *
 * @memberOf LaborCategoryGroupService
 */
    LaborCategoryGroupService.prototype.getAllActive = function () {
        var _this = this;
        return this.http.get(this.getLCATGroupUrl + "/active", httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (_) { return _this.log("getAllActive"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.handleError("getAllActive")));
    };
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    LaborCategoryGroupService.prototype.handleError = function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = "operation"; }
        return function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            _this.log("${operation} failed: ${error.message}");
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(result);
        };
    };
    /** Log a Attribute Service message with the MessageService */
    LaborCategoryGroupService.prototype.log = function (message) {
        //this.messageService.add("Profile Service: ${message}");
    };
    LaborCategoryGroupService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]])
    ], LaborCategoryGroupService);
    return LaborCategoryGroupService;
}());



/***/ }),

/***/ "./src/app/admin/services/lookup.service.ts":
/*!**************************************************!*\
  !*** ./src/app/admin/services/lookup.service.ts ***!
  \**************************************************/
/*! exports provided: LookupService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LookupService", function() { return LookupService; });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
/*
@author : Deloitte
Service class to perform resource related operations.
*/
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpHeaders"]({ "Content-Type": "application/json" })
};
/**
 *
 *
 * @export
 * @class LaborCategoryService
 */
var LookupService = /** @class */ (function () {
    function LookupService(http) {
        this.http = http;
        this.getLookupurl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/v1/lookup';
    }
    LookupService.prototype.getAll = function () {
        var _this = this;
        return this.http.get(this.getLookupurl, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getAll"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getAll")));
    };
    LookupService.prototype.getAllByRefTypeId = function (refTypeId) {
        var _this = this;
        return this.http.get(this.getLookupurl + '/reftype/' + refTypeId, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getAllByRefTypeId"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getAllByRefTypeId")));
    };
    LookupService.prototype.getAllRefTypes = function () {
        var _this = this;
        return this.http.get(this.getLookupurl + '/reftype', httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("getAllRefTypes"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("getAllRefTypes")));
    };
    LookupService.prototype.createLookup = function (lookup) {
        var _this = this;
        return this.http.post(this.getLookupurl, lookup, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("createLookup"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("createLookup")));
    };
    LookupService.prototype.updateLookup = function (lookup) {
        var _this = this;
        return this.http.put(this.getLookupurl, lookup, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("updateLookup"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("updateLookup")));
    };
    LookupService.prototype.deleteLookupById = function (id) {
        var _this = this;
        return this.http.delete(this.getLookupurl + '/' + id, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (_) { return _this.log("deleteLookupById"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])(this.handleError("deleteLookupById")));
    };
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    LookupService.prototype.handleError = function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = "operation"; }
        return function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            _this.log("${operation} failed: ${error.message}");
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(result);
        };
    };
    /** Log a Attribute Service message with the MessageService */
    LookupService.prototype.log = function (message) {
        //this.messageService.add("Profile Service: ${message}");
    };
    LookupService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpClient"]])
    ], LookupService);
    return LookupService;
}());



/***/ }),

/***/ "./src/app/admin/services/role.service.ts":
/*!************************************************!*\
  !*** ./src/app/admin/services/role.service.ts ***!
  \************************************************/
/*! exports provided: RoleService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoleService", function() { return RoleService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/*
@author : Deloitte
Service class to perform Role related operations.
*/





var httpOptions = {
    headers: new _angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpHeaders"]({ "Content-Type": "application/json" })
};
/**
 *
 *
 * @export
 * @class RoleService
 */
var RoleService = /** @class */ (function () {
    function RoleService(http) {
        this.http = http;
        this.getrolesurl = _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].apiurl + '/api/useradmin/roles';
    }
    RoleService.prototype.getRoles = function () {
        var _this = this;
        return this.http.get(this.getrolesurl, httpOptions).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (_) { return _this.log("getRoles"); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(this.handleError("getRoles")));
    };
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    RoleService.prototype.handleError = function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = "operation"; }
        return function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            _this.log("${operation} failed: ${error.message}");
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(result);
        };
    };
    /** Log a Attribute Service message with the MessageService */
    RoleService.prototype.log = function (message) {
        //this.messageService.add("Profile Service: ${message}");
    };
    RoleService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_3__["HttpClient"]])
    ], RoleService);
    return RoleService;
}());



/***/ }),

/***/ "./src/app/admin/util/client-filter.pipe.ts":
/*!**************************************************!*\
  !*** ./src/app/admin/util/client-filter.pipe.ts ***!
  \**************************************************/
/*! exports provided: ClientFilterPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClientFilterPipe", function() { return ClientFilterPipe; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var ClientFilterPipe = /** @class */ (function () {
    function ClientFilterPipe() {
    }
    ClientFilterPipe.prototype.transform = function (data, filter) {
        var results = data;
        if (data) {
            if (filter) {
                // filter by tdl name
                if (typeof filter.codeFilter !== 'undefined' && filter.codeFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.name;
                        var val2 = filter.codeFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
            }
        }
        return results;
    };
    ClientFilterPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: "clientfilterpipe"
        })
    ], ClientFilterPipe);
    return ClientFilterPipe;
}());



/***/ }),

/***/ "./src/app/admin/util/laborcat-filter.pipe.ts":
/*!****************************************************!*\
  !*** ./src/app/admin/util/laborcat-filter.pipe.ts ***!
  \****************************************************/
/*! exports provided: LaborCatFilterPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LaborCatFilterPipe", function() { return LaborCatFilterPipe; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var LaborCatFilterPipe = /** @class */ (function () {
    function LaborCatFilterPipe() {
    }
    LaborCatFilterPipe.prototype.transform = function (data, filter) {
        var results = data;
        if (data) {
            if (filter) {
                // filter by tdl name
                if (typeof filter.codeFilter !== 'undefined' && filter.codeFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.name;
                        var val2 = filter.codeFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
            }
        }
        return results;
    };
    LaborCatFilterPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: "laborcatfilterpipe"
        })
    ], LaborCatFilterPipe);
    return LaborCatFilterPipe;
}());



/***/ }),

/***/ "./src/app/admin/util/lookup-filter.pipe.ts":
/*!**************************************************!*\
  !*** ./src/app/admin/util/lookup-filter.pipe.ts ***!
  \**************************************************/
/*! exports provided: LookupFilterPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LookupFilterPipe", function() { return LookupFilterPipe; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var LookupFilterPipe = /** @class */ (function () {
    function LookupFilterPipe() {
    }
    LookupFilterPipe.prototype.transform = function (data, filter) {
        var results = data;
        if (data) {
            if (filter) {
                var handler = this;
                // filter by refType
                if (typeof filter.refCodeFilter !== 'undefined' && filter.refCodeFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.refCode;
                        var val2 = filter.refCodeFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
                if (typeof filter.refValueFilter !== 'undefined' && filter.refValueFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.refValue;
                        var val2 = filter.refValueFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
            }
        }
        return results;
    };
    LookupFilterPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: "lookupfilterpipe"
        })
    ], LookupFilterPipe);
    return LookupFilterPipe;
}());



/***/ }),

/***/ "./src/app/admin/util/resource-filter.pipe.ts":
/*!****************************************************!*\
  !*** ./src/app/admin/util/resource-filter.pipe.ts ***!
  \****************************************************/
/*! exports provided: ResourceFilterPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceFilterPipe", function() { return ResourceFilterPipe; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ramda */ "./node_modules/ramda/es/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var ResourceFilterPipe = /** @class */ (function () {
    function ResourceFilterPipe() {
    }
    ResourceFilterPipe.prototype.transform = function (data, filter) {
        var results = data;
        if (data) {
            if (filter) {
                var handler = this;
                // filter by tdl name
                if (typeof filter.nameFilter !== 'undefined' && filter.nameFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.name;
                        var val2 = filter.nameFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
                // filter by placeholder
                if (typeof filter.placeholderFilter !== 'undefined' && filter.placeholderFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(item.placeholder) ? "" : item.placeholder;
                        var val2 = Object(ramda__WEBPACK_IMPORTED_MODULE_2__["isNil"])(filter.placeholderFilter) ? "" : filter.placeholderFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
            }
        }
        return results;
    };
    ResourceFilterPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: "resfilterpipe"
        })
    ], ResourceFilterPipe);
    return ResourceFilterPipe;
}());



/***/ }),

/***/ "./src/app/admin/util/user-filter.pipe.ts":
/*!************************************************!*\
  !*** ./src/app/admin/util/user-filter.pipe.ts ***!
  \************************************************/
/*! exports provided: UserFilterPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserFilterPipe", function() { return UserFilterPipe; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var UserFilterPipe = /** @class */ (function () {
    function UserFilterPipe() {
    }
    UserFilterPipe.prototype.transform = function (data, filter) {
        var results = data;
        if (data) {
            if (filter) {
                var handler = this;
                // filter by tdl name
                if (typeof filter.firstNameFilter !== 'undefined' && filter.firstNameFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.firstName;
                        var val2 = filter.firstNameFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
                if (typeof filter.lastNameFilter !== 'undefined' && filter.lastNameFilter.length > 0) {
                    results = lodash__WEBPACK_IMPORTED_MODULE_0__["filter"](results, function (item) {
                        var val1 = item.lastName;
                        var val2 = filter.lastNameFilter;
                        return val1.toUpperCase().indexOf(val2.toUpperCase()) > -1;
                    });
                }
            }
        }
        return results;
    };
    UserFilterPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"])({
            name: "userfilterpipe"
        })
    ], UserFilterPipe);
    return UserFilterPipe;
}());



/***/ }),

/***/ "./src/app/tdl/models/resource.model.ts":
/*!**********************************************!*\
  !*** ./src/app/tdl/models/resource.model.ts ***!
  \**********************************************/
/*! exports provided: Resource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Resource", function() { return Resource; });
var Resource = /** @class */ (function () {
    function Resource() {
    }
    return Resource;
}());



/***/ })

}]);
//# sourceMappingURL=admin-components-admin-module.js.map